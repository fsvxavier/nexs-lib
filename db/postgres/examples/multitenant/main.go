package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/fsvxavier/nexs-lib/db/postgres"
)

func main() {
	fmt.Println("=== Exemplo de Multi-Tenancy ===")

	// Configura√ß√£o da conex√£o
	connectionString := "postgres://nexs_user:nexs_password@localhost:5432/nexs_testdb?sslmode=disable"

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// 1. Conectar ao banco
	fmt.Println("\n1. Conectando ao banco...")
	conn, err := postgres.Connect(ctx, connectionString)
	if err != nil {
		log.Printf("üí° Exemplo de Multi-Tenancy seria executado com banco real: %v", err)
		demonstrateMultiTenancyConceptually()
		return
	}
	defer conn.Close(ctx)

	// 2. Configurar estrutura multi-tenant
	fmt.Println("2. Configurando estrutura multi-tenant...")
	if err := setupMultiTenantStructure(ctx, conn); err != nil {
		log.Fatalf("Erro ao configurar estrutura: %v", err)
	}

	// 3. Exemplo: Schema-based multi-tenancy
	fmt.Println("\n3. Exemplo: Schema-based multi-tenancy...")
	if err := demonstrateSchemaBasedMultiTenancy(ctx, conn); err != nil {
		log.Printf("Erro no exemplo schema-based: %v", err)
	}

	// 4. Exemplo: Row-level multi-tenancy
	fmt.Println("\n4. Exemplo: Row-level multi-tenancy...")
	if err := demonstrateRowLevelMultiTenancy(ctx, conn); err != nil {
		log.Printf("Erro no exemplo row-level: %v", err)
	}

	// 5. Exemplo: Database-level multi-tenancy
	fmt.Println("\n5. Exemplo: Database-level multi-tenancy...")
	if err := demonstrateDatabaseLevelMultiTenancy(ctx, conn); err != nil {
		log.Printf("Erro no exemplo database-level: %v", err)
	}

	// 6. Exemplo: Tenant isolation e security
	fmt.Println("\n6. Exemplo: Tenant isolation e security...")
	if err := demonstrateTenantIsolationSecurity(ctx, conn); err != nil {
		log.Printf("Erro no exemplo de isolamento: %v", err)
	}

	// 7. Exemplo: Tenant management
	fmt.Println("\n7. Exemplo: Tenant management...")
	if err := demonstrateTenantManagement(ctx, conn); err != nil {
		log.Printf("Erro no exemplo de gerenciamento: %v", err)
	}

	// 8. Limpeza
	fmt.Println("\n8. Limpando recursos...")
	if err := cleanupMultiTenantResources(ctx, conn); err != nil {
		log.Printf("Erro na limpeza: %v", err)
	}

	fmt.Println("\n=== Exemplo de Multi-Tenancy - CONCLU√çDO ===")
}

func demonstrateMultiTenancyConceptually() {
	fmt.Println("\nüéØ Demonstra√ß√£o Conceitual de Multi-Tenancy")
	fmt.Println("==========================================")

	fmt.Println("\nüí° Conceitos fundamentais:")
	fmt.Println("  - Multi-tenancy permite m√∫ltiplos inquilinos (tenants) em uma aplica√ß√£o")
	fmt.Println("  - Isolamento de dados entre tenants √© fundamental")
	fmt.Println("  - Diferentes estrat√©gias oferecem diferentes n√≠veis de isolamento")
	fmt.Println("  - Performance e custo variam conforme a estrat√©gia escolhida")

	fmt.Println("\nüèóÔ∏è Estrat√©gias de Multi-Tenancy:")
	fmt.Println("  1. Schema-based: Um schema por tenant")
	fmt.Println("  2. Row-level: Coluna tenant_id nas tabelas")
	fmt.Println("  3. Database-level: Um banco por tenant")
	fmt.Println("  4. H√≠brida: Combina√ß√£o de estrat√©gias")

	fmt.Println("\n‚öñÔ∏è Compara√ß√£o de estrat√©gias:")
	fmt.Println("  Schema-based:")
	fmt.Println("    ‚úÖ Bom isolamento")
	fmt.Println("    ‚úÖ Facilita backup por tenant")
	fmt.Println("    ‚ùå Overhead de manuten√ß√£o")
	fmt.Println("    ‚ùå Limite de schemas")

	fmt.Println("  Row-level:")
	fmt.Println("    ‚úÖ Eficiente para muitos tenants")
	fmt.Println("    ‚úÖ F√°cil manuten√ß√£o")
	fmt.Println("    ‚ùå Risco de vazamento de dados")
	fmt.Println("    ‚ùå Complexidade de queries")

	fmt.Println("  Database-level:")
	fmt.Println("    ‚úÖ Isolamento m√°ximo")
	fmt.Println("    ‚úÖ Backup/restore individual")
	fmt.Println("    ‚ùå Alto custo de recursos")
	fmt.Println("    ‚ùå Complexidade de deployment")

	fmt.Println("\nüõ†Ô∏è Casos de uso:")
	fmt.Println("  - SaaS applications")
	fmt.Println("  - Multi-client platforms")
	fmt.Println("  - Enterprise applications")
	fmt.Println("  - Cloud services")
}

func setupMultiTenantStructure(ctx context.Context, conn postgres.IConn) error {
	// Criar tabela de tenants
	_, err := conn.Exec(ctx, `
		CREATE TABLE IF NOT EXISTS tenants (
			id SERIAL PRIMARY KEY,
			name VARCHAR(100) NOT NULL UNIQUE,
			schema_name VARCHAR(100) NOT NULL UNIQUE,
			created_at TIMESTAMP DEFAULT NOW(),
			active BOOLEAN DEFAULT true,
			settings JSONB DEFAULT '{}'
		)
	`)
	if err != nil {
		return fmt.Errorf("erro ao criar tabela de tenants: %w", err)
	}

	// Limpar dados anteriores
	_, err = conn.Exec(ctx, "DELETE FROM tenants")
	if err != nil {
		return fmt.Errorf("erro ao limpar tenants: %w", err)
	}

	fmt.Println("   ‚úÖ Estrutura multi-tenant configurada")
	return nil
}

func demonstrateSchemaBasedMultiTenancy(ctx context.Context, conn postgres.IConn) error {
	fmt.Println("=== Schema-based Multi-Tenancy ===")

	// Definir tenants
	tenants := []struct {
		name       string
		schemaName string
	}{
		{"Empresa A", "tenant_empresa_a"},
		{"Empresa B", "tenant_empresa_b"},
		{"Empresa C", "tenant_empresa_c"},
	}

	// Criar schemas para cada tenant
	fmt.Println("   Criando schemas para cada tenant...")
	for _, tenant := range tenants {
		// Registrar tenant
		_, err := conn.Exec(ctx,
			"INSERT INTO tenants (name, schema_name) VALUES ($1, $2)",
			tenant.name, tenant.schemaName)
		if err != nil {
			return fmt.Errorf("erro ao registrar tenant %s: %w", tenant.name, err)
		}

		// Criar schema
		_, err = conn.Exec(ctx, fmt.Sprintf("CREATE SCHEMA IF NOT EXISTS %s", tenant.schemaName))
		if err != nil {
			return fmt.Errorf("erro ao criar schema %s: %w", tenant.schemaName, err)
		}

		// Criar tabelas no schema do tenant
		_, err = conn.Exec(ctx, fmt.Sprintf(`
			CREATE TABLE IF NOT EXISTS %s.users (
				id SERIAL PRIMARY KEY,
				name VARCHAR(100) NOT NULL,
				email VARCHAR(100) NOT NULL UNIQUE,
				created_at TIMESTAMP DEFAULT NOW()
			)
		`, tenant.schemaName))
		if err != nil {
			return fmt.Errorf("erro ao criar tabela users para %s: %w", tenant.name, err)
		}

		fmt.Printf("   ‚úÖ Schema criado para %s: %s\n", tenant.name, tenant.schemaName)
	}

	// Inserir dados espec√≠ficos para cada tenant
	fmt.Println("   Inserindo dados espec√≠ficos para cada tenant...")

	tenantData := map[string][]struct {
		name  string
		email string
	}{
		"tenant_empresa_a": {
			{"Jo√£o Silva", "joao@empresaa.com"},
			{"Maria Santos", "maria@empresaa.com"},
		},
		"tenant_empresa_b": {
			{"Pedro Oliveira", "pedro@empresab.com"},
			{"Ana Costa", "ana@empresab.com"},
		},
		"tenant_empresa_c": {
			{"Carlos Lima", "carlos@empresac.com"},
			{"Fernanda Rocha", "fernanda@empresac.com"},
		},
	}

	for schemaName, users := range tenantData {
		for _, user := range users {
			_, err := conn.Exec(ctx,
				fmt.Sprintf("INSERT INTO %s.users (name, email) VALUES ($1, $2)", schemaName),
				user.name, user.email)
			if err != nil {
				return fmt.Errorf("erro ao inserir usu√°rio %s no schema %s: %w",
					user.name, schemaName, err)
			}
		}
		fmt.Printf("   ‚úÖ Dados inseridos para schema %s\n", schemaName)
	}

	// Demonstrar isolamento: consultar dados de cada tenant
	fmt.Println("   Demonstrando isolamento de dados...")
	for _, tenant := range tenants {
		fmt.Printf("   üìä Dados do tenant %s:\n", tenant.name)

		rows, err := conn.Query(ctx,
			fmt.Sprintf("SELECT name, email FROM %s.users ORDER BY name", tenant.schemaName))
		if err != nil {
			return fmt.Errorf("erro ao consultar dados do tenant %s: %w", tenant.name, err)
		}
		defer rows.Close()

		count := 0
		for rows.Next() {
			var name, email string
			if err := rows.Scan(&name, &email); err != nil {
				return fmt.Errorf("erro ao ler dados do tenant %s: %w", tenant.name, err)
			}
			count++
			fmt.Printf("     %d. %s (%s)\n", count, name, email)
		}

		if count == 0 {
			fmt.Printf("     (Nenhum usu√°rio encontrado)\n")
		}
	}

	// Demonstrar mudan√ßa de contexto de tenant
	fmt.Println("   Demonstrando mudan√ßa de contexto de tenant...")
	if err := demonstrateSchemaContextSwitching(ctx, conn); err != nil {
		return fmt.Errorf("erro na mudan√ßa de contexto: %w", err)
	}

	return nil
}

func demonstrateSchemaContextSwitching(ctx context.Context, conn postgres.IConn) error {
	// Simular mudan√ßa de contexto usando search_path
	tenantSchemas := []string{"tenant_empresa_a", "tenant_empresa_b", "tenant_empresa_c"}

	for _, schema := range tenantSchemas {
		fmt.Printf("   üîÑ Mudando contexto para schema: %s\n", schema)

		// Definir search_path para o tenant
		_, err := conn.Exec(ctx, fmt.Sprintf("SET search_path TO %s, public", schema))
		if err != nil {
			return fmt.Errorf("erro ao definir search_path: %w", err)
		}

		// Consultar dados usando contexto do tenant
		rows, err := conn.Query(ctx, "SELECT COUNT(*) FROM users")
		if err != nil {
			return fmt.Errorf("erro ao consultar usu√°rios do tenant %s: %w", schema, err)
		}

		if rows.Next() {
			var count int
			if err := rows.Scan(&count); err != nil {
				rows.Close()
				return fmt.Errorf("erro ao ler contagem: %w", err)
			}
			fmt.Printf("   üìä Usu√°rios encontrados no contexto: %d\n", count)
		}
		rows.Close() // Fechar rows imediatamente ap√≥s uso
	}

	// Restaurar search_path padr√£o
	_, err := conn.Exec(ctx, "SET search_path TO public")
	if err != nil {
		return fmt.Errorf("erro ao restaurar search_path: %w", err)
	}

	return nil
}

func demonstrateRowLevelMultiTenancy(ctx context.Context, conn postgres.IConn) error {
	fmt.Println("=== Row-level Multi-Tenancy ===")

	// Criar tabela com coluna tenant_id
	_, err := conn.Exec(ctx, `
		CREATE TABLE IF NOT EXISTS shared_users (
			id SERIAL PRIMARY KEY,
			tenant_id INTEGER NOT NULL REFERENCES tenants(id),
			name VARCHAR(100) NOT NULL,
			email VARCHAR(100) NOT NULL,
			created_at TIMESTAMP DEFAULT NOW(),
			UNIQUE(tenant_id, email)
		)
	`)
	if err != nil {
		return fmt.Errorf("erro ao criar tabela shared_users: %w", err)
	}

	// Obter IDs dos tenants
	tenantIDs := make(map[string]int)
	rows, err := conn.Query(ctx, "SELECT id, name FROM tenants ORDER BY id")
	if err != nil {
		return fmt.Errorf("erro ao consultar tenants: %w", err)
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name string
		if err := rows.Scan(&id, &name); err != nil {
			return fmt.Errorf("erro ao ler tenant: %w", err)
		}
		tenantIDs[name] = id
	}

	// Inserir dados com tenant_id
	fmt.Println("   Inserindo dados com tenant_id...")

	userData := []struct {
		tenantName string
		name       string
		email      string
	}{
		{"Empresa A", "Jo√£o Silva", "joao@empresaa.com"},
		{"Empresa A", "Maria Santos", "maria@empresaa.com"},
		{"Empresa B", "Pedro Oliveira", "pedro@empresab.com"},
		{"Empresa B", "Ana Costa", "ana@empresab.com"},
		{"Empresa C", "Carlos Lima", "carlos@empresac.com"},
		{"Empresa C", "Fernanda Rocha", "fernanda@empresac.com"},
	}

	for _, user := range userData {
		tenantID, exists := tenantIDs[user.tenantName]
		if !exists {
			return fmt.Errorf("tenant %s n√£o encontrado", user.tenantName)
		}

		_, err := conn.Exec(ctx,
			"INSERT INTO shared_users (tenant_id, name, email) VALUES ($1, $2, $3)",
			tenantID, user.name, user.email)
		if err != nil {
			return fmt.Errorf("erro ao inserir usu√°rio %s: %w", user.name, err)
		}
	}

	fmt.Println("   ‚úÖ Dados inseridos com tenant_id")

	// Demonstrar queries com filtro por tenant
	fmt.Println("   Demonstrando queries com filtro por tenant...")

	for tenantName, tenantID := range tenantIDs {
		fmt.Printf("   üìä Usu√°rios do tenant %s (ID: %d):\n", tenantName, tenantID)

		rows, err := conn.Query(ctx,
			"SELECT name, email FROM shared_users WHERE tenant_id = $1 ORDER BY name",
			tenantID)
		if err != nil {
			return fmt.Errorf("erro ao consultar usu√°rios do tenant %s: %w", tenantName, err)
		}
		defer rows.Close()

		count := 0
		for rows.Next() {
			var name, email string
			if err := rows.Scan(&name, &email); err != nil {
				return fmt.Errorf("erro ao ler usu√°rio: %w", err)
			}
			count++
			fmt.Printf("     %d. %s (%s)\n", count, name, email)
		}

		if count == 0 {
			fmt.Printf("     (Nenhum usu√°rio encontrado)\n")
		}
	}

	// Demonstrar Row Level Security (RLS)
	fmt.Println("   Demonstrando Row Level Security (RLS)...")
	if err := demonstrateRowLevelSecurity(ctx, conn); err != nil {
		return fmt.Errorf("erro ao demonstrar RLS: %w", err)
	}

	return nil
}

func demonstrateRowLevelSecurity(ctx context.Context, conn postgres.IConn) error {
	// Habilitar RLS na tabela
	_, err := conn.Exec(ctx, "ALTER TABLE shared_users ENABLE ROW LEVEL SECURITY")
	if err != nil {
		return fmt.Errorf("erro ao habilitar RLS: %w", err)
	}

	// Criar pol√≠tica de RLS
	_, err = conn.Exec(ctx, `
		CREATE POLICY tenant_isolation ON shared_users
		FOR ALL
		USING (tenant_id = current_setting('app.current_tenant_id')::integer)
	`)
	if err != nil {
		// Pol√≠tica pode j√° existir, ignorar erro
		fmt.Printf("   ‚ö†Ô∏è Pol√≠tica RLS: %v\n", err)
	}

	// Simular configura√ß√£o de tenant atual
	tenantID := 1 // Empresa A
	_, err = conn.Exec(ctx, fmt.Sprintf("SET app.current_tenant_id = '%d'", tenantID))
	if err != nil {
		return fmt.Errorf("erro ao definir tenant atual: %w", err)
	}

	fmt.Printf("   üîê RLS configurado para tenant_id: %d\n", tenantID)
	fmt.Println("   üìä Consulta com RLS ativo:")

	// Consultar dados com RLS ativo
	rows, err := conn.Query(ctx, "SELECT name, email FROM shared_users ORDER BY name")
	if err != nil {
		return fmt.Errorf("erro ao consultar com RLS: %w", err)
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var name, email string
		if err := rows.Scan(&name, &email); err != nil {
			return fmt.Errorf("erro ao ler com RLS: %w", err)
		}
		count++
		fmt.Printf("     %d. %s (%s)\n", count, name, email)
	}

	fmt.Printf("   üìä Registros vis√≠veis com RLS: %d\n", count)

	// Limpar configura√ß√£o
	_, err = conn.Exec(ctx, "RESET app.current_tenant_id")
	if err != nil {
		return fmt.Errorf("erro ao resetar tenant_id: %w", err)
	}

	return nil
}

func demonstrateDatabaseLevelMultiTenancy(ctx context.Context, conn postgres.IConn) error {
	fmt.Println("=== Database-level Multi-Tenancy ===")

	// Demonstrar conceito (n√£o criaremos DBs reais)
	fmt.Println("   üí° Conceito: Database-level Multi-Tenancy")
	fmt.Println("   - Cada tenant tem seu pr√≥prio banco de dados")
	fmt.Println("   - Isolamento m√°ximo entre tenants")
	fmt.Println("   - Backup/restore individual por tenant")
	fmt.Println("   - Escalabilidade horizontal por tenant")

	// Simular configura√ß√£o de connection strings por tenant
	tenantDatabases := map[string]string{
		"tenant_empresa_a": "nexs_tenant_empresa_a",
		"tenant_empresa_b": "nexs_tenant_empresa_b",
		"tenant_empresa_c": "nexs_tenant_empresa_c",
	}

	fmt.Println("   üìä Configura√ß√£o simulada de bancos por tenant:")
	for tenant, dbName := range tenantDatabases {
		fmt.Printf("   - %s: %s\n", tenant, dbName)
	}

	// Demonstrar roteamento de tenant
	fmt.Println("   üîÑ Simulando roteamento de tenant...")
	currentTenant := "tenant_empresa_a"
	targetDB := tenantDatabases[currentTenant]

	fmt.Printf("   Cliente requisita acesso ao tenant: %s\n", currentTenant)
	fmt.Printf("   Sistema roteia para banco: %s\n", targetDB)
	fmt.Printf("   Connection string: postgres://user:pass@localhost:5432/%s\n", targetDB)

	// Demonstrar vantagens e desvantagens
	fmt.Println("   ‚úÖ Vantagens:")
	fmt.Println("     - Isolamento completo")
	fmt.Println("     - Backup individual")
	fmt.Println("     - Escalabilidade horizontal")
	fmt.Println("     - Configura√ß√£o por tenant")

	fmt.Println("   ‚ùå Desvantagens:")
	fmt.Println("     - Alto custo de recursos")
	fmt.Println("     - Complexidade de gerenciamento")
	fmt.Println("     - Overhead de conex√µes")
	fmt.Println("     - Dificuldade em relat√≥rios cross-tenant")

	return nil
}

func demonstrateTenantIsolationSecurity(ctx context.Context, conn postgres.IConn) error {
	fmt.Println("=== Tenant Isolation & Security ===")

	// Demonstrar valida√ß√£o de tenant
	fmt.Println("   üîê Valida√ß√£o de tenant:")

	// Simular middleware de valida√ß√£o
	fmt.Println("   Simulando middleware de valida√ß√£o...")
	requestTenantID := 1 // Vindo do JWT token ou header

	// Validar se tenant existe e est√° ativo
	var tenantExists bool
	var tenantActive bool
	var tenantName string

	err := conn.QueryRow(ctx,
		"SELECT EXISTS(SELECT 1 FROM tenants WHERE id = $1), "+
			"COALESCE((SELECT active FROM tenants WHERE id = $1), false), "+
			"COALESCE((SELECT name FROM tenants WHERE id = $1), '')",
		requestTenantID).Scan(&tenantExists, &tenantActive, &tenantName)

	if err != nil {
		return fmt.Errorf("erro ao validar tenant: %w", err)
	}

	if !tenantExists {
		fmt.Printf("   ‚ùå Tenant ID %d n√£o existe\n", requestTenantID)
		return fmt.Errorf("tenant inv√°lido")
	}

	if !tenantActive {
		fmt.Printf("   ‚ùå Tenant '%s' est√° inativo\n", tenantName)
		return fmt.Errorf("tenant inativo")
	}

	fmt.Printf("   ‚úÖ Tenant '%s' (ID: %d) validado com sucesso\n", tenantName, requestTenantID)

	// Demonstrar sanitiza√ß√£o de dados
	fmt.Println("   üßπ Sanitiza√ß√£o de dados:")
	fmt.Println("   - Filtros autom√°ticos por tenant_id")
	fmt.Println("   - Valida√ß√£o de permiss√µes")
	fmt.Println("   - Preven√ß√£o de SQL injection")

	// Simular query segura
	fmt.Println("   Executando query segura...")
	userEmail := "joao@empresaa.com"

	var userID int
	var userName string
	err = conn.QueryRow(ctx,
		"SELECT id, name FROM shared_users WHERE tenant_id = $1 AND email = $2",
		requestTenantID, userEmail).Scan(&userID, &userName)

	if err != nil {
		fmt.Printf("   ‚ùå Usu√°rio n√£o encontrado ou sem permiss√£o\n")
	} else {
		fmt.Printf("   ‚úÖ Usu√°rio encontrado: %s (ID: %d)\n", userName, userID)
	}

	// Demonstrar auditoria
	fmt.Println("   üìã Auditoria de acesso:")
	fmt.Printf("   - Tenant: %s (ID: %d)\n", tenantName, requestTenantID)
	fmt.Printf("   - Usu√°rio acessado: %s\n", userEmail)
	fmt.Printf("   - Timestamp: %s\n", time.Now().Format("2006-01-02 15:04:05"))
	fmt.Printf("   - IP: 192.168.1.100 (simulado)\n")

	return nil
}

func demonstrateTenantManagement(ctx context.Context, conn postgres.IConn) error {
	fmt.Println("=== Tenant Management ===")

	// Listar todos os tenants
	fmt.Println("   üìã Listando todos os tenants:")
	rows, err := conn.Query(ctx, `
		SELECT id, name, schema_name, created_at, active 
		FROM tenants 
		ORDER BY created_at
	`)
	if err != nil {
		return fmt.Errorf("erro ao listar tenants: %w", err)
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name, schemaName string
		var createdAt time.Time
		var active bool

		if err := rows.Scan(&id, &name, &schemaName, &createdAt, &active); err != nil {
			return fmt.Errorf("erro ao ler tenant: %w", err)
		}

		status := "‚úÖ Ativo"
		if !active {
			status = "‚ùå Inativo"
		}

		fmt.Printf("   %d. %s (%s) - %s - Criado: %s\n",
			id, name, schemaName, status, createdAt.Format("2006-01-02 15:04:05"))
	}

	// Demonstrar estat√≠sticas por tenant
	fmt.Println("   üìä Estat√≠sticas por tenant:")

	// Estat√≠sticas de schema-based
	fmt.Println("   Schema-based tenants:")
	for _, schema := range []string{"tenant_empresa_a", "tenant_empresa_b", "tenant_empresa_c"} {
		var count int
		err := conn.QueryRow(ctx,
			fmt.Sprintf("SELECT COUNT(*) FROM %s.users", schema)).Scan(&count)
		if err != nil {
			fmt.Printf("     %s: Erro ao consultar (%v)\n", schema, err)
		} else {
			fmt.Printf("     %s: %d usu√°rios\n", schema, count)
		}
	}

	// Estat√≠sticas de row-level
	fmt.Println("   Row-level tenants:")
	statRows, err := conn.Query(ctx, `
		SELECT t.name, COUNT(su.id) as user_count
		FROM tenants t
		LEFT JOIN shared_users su ON t.id = su.tenant_id
		GROUP BY t.id, t.name
		ORDER BY t.name
	`)
	if err != nil {
		return fmt.Errorf("erro ao consultar estat√≠sticas: %w", err)
	}
	defer statRows.Close()

	for statRows.Next() {
		var tenantName string
		var userCount int
		if err := statRows.Scan(&tenantName, &userCount); err != nil {
			return fmt.Errorf("erro ao ler estat√≠sticas: %w", err)
		}
		fmt.Printf("     %s: %d usu√°rios\n", tenantName, userCount)
	}

	// Demonstrar opera√ß√µes de manuten√ß√£o
	fmt.Println("   üîß Opera√ß√µes de manuten√ß√£o:")
	fmt.Println("   - Backup autom√°tico por tenant")
	fmt.Println("   - Limpeza de dados antigos")
	fmt.Println("   - Monitoramento de uso")
	fmt.Println("   - Migra√ß√£o de schema")

	return nil
}

func cleanupMultiTenantResources(ctx context.Context, conn postgres.IConn) error {
	// Limpar dados
	_, err := conn.Exec(ctx, "DELETE FROM shared_users")
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao limpar shared_users: %v\n", err)
	}

	// Desabilitar RLS
	_, err = conn.Exec(ctx, "ALTER TABLE shared_users DISABLE ROW LEVEL SECURITY")
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao desabilitar RLS: %v\n", err)
	}

	// Remover pol√≠tica RLS
	_, err = conn.Exec(ctx, "DROP POLICY IF EXISTS tenant_isolation ON shared_users")
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao remover pol√≠tica RLS: %v\n", err)
	}

	// Remover schemas
	schemas := []string{"tenant_empresa_a", "tenant_empresa_b", "tenant_empresa_c"}
	for _, schema := range schemas {
		_, err = conn.Exec(ctx, fmt.Sprintf("DROP SCHEMA IF EXISTS %s CASCADE", schema))
		if err != nil {
			fmt.Printf("   ‚ùå Erro ao remover schema %s: %v\n", schema, err)
		}
	}

	// Remover tabelas
	_, err = conn.Exec(ctx, "DROP TABLE IF EXISTS shared_users")
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao remover shared_users: %v\n", err)
	}

	_, err = conn.Exec(ctx, "DROP TABLE IF EXISTS tenants")
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao remover tenants: %v\n", err)
	}

	fmt.Println("   ‚úÖ Recursos multi-tenant limpos")
	return nil
}
