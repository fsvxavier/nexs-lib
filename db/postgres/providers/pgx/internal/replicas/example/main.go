package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/fsvxavier/nexs-lib/db/postgres/interfaces"
	"github.com/fsvxavier/nexs-lib/db/postgres/providers/pgx/internal/replicas"
)

func main() {
	fmt.Println("=== Sistema de Read Replicas PostgreSQL ===")

	// Criar contexto
	ctx := context.Background()

	// Configurar replica manager
	config := replicas.ReplicaManagerConfig{
		LoadBalancingStrategy: interfaces.LoadBalancingRoundRobin,
		ReadPreference:        interfaces.ReadPreferenceSecondaryPreferred,
		HealthCheckInterval:   30 * time.Second,
		HealthCheckTimeout:    5 * time.Second,
	}

	// Criar replica manager
	replicaManager := replicas.NewReplicaManager(config)

	// Adicionar r√©plicas
	fmt.Println("\n1. Adicionando r√©plicas...")

	err := replicaManager.AddReplica(ctx, "replica-1", "postgres://replica1:5432/mydb", 10)
	if err != nil {
		log.Printf("Erro ao adicionar replica-1: %v", err)
	} else {
		fmt.Println("‚úì R√©plica replica-1 adicionada com sucesso")
	}

	err = replicaManager.AddReplica(ctx, "replica-2", "postgres://replica2:5432/mydb", 20)
	if err != nil {
		log.Printf("Erro ao adicionar replica-2: %v", err)
	} else {
		fmt.Println("‚úì R√©plica replica-2 adicionada com sucesso")
	}

	err = replicaManager.AddReplica(ctx, "replica-3", "postgres://replica3:5432/mydb", 30)
	if err != nil {
		log.Printf("Erro ao adicionar replica-3: %v", err)
	} else {
		fmt.Println("‚úì R√©plica replica-3 adicionada com sucesso")
	}

	// Listar r√©plicas
	fmt.Println("\n2. Listando r√©plicas...")
	replicas_list := replicaManager.ListReplicas()
	for _, replica := range replicas_list {
		fmt.Printf("   - ID: %s, DSN: %s, Peso: %d, Status: %s\n",
			replica.GetID(), replica.GetDSN(), replica.GetWeight(), replica.GetStatus())
	}

	// Iniciar replica manager
	fmt.Println("\n3. Iniciando replica manager...")
	err = replicaManager.Start(ctx)
	if err != nil {
		log.Printf("Erro ao iniciar replica manager: %v", err)
	} else {
		fmt.Println("‚úì Replica manager iniciado com sucesso")
	}

	// Testar diferentes estrat√©gias de balanceamento
	fmt.Println("\n4. Testando estrat√©gias de balanceamento...")

	strategies := []interfaces.LoadBalancingStrategy{
		interfaces.LoadBalancingRoundRobin,
		interfaces.LoadBalancingRandom,
		interfaces.LoadBalancingWeighted,
		interfaces.LoadBalancingLatency,
	}

	for _, strategy := range strategies {
		fmt.Printf("\n   Estrat√©gia: %s\n", strategy)

		// Testar sele√ß√£o de r√©plicas
		for i := 0; i < 3; i++ {
			replica, err := replicaManager.SelectReplicaWithStrategy(ctx, strategy)
			if err != nil {
				fmt.Printf("   Erro ao selecionar r√©plica: %v\n", err)
				continue
			}

			fmt.Printf("   Tentativa %d: R√©plica selecionada: %s (peso: %d)\n",
				i+1, replica.GetID(), replica.GetWeight())
		}
	}

	// Testar prefer√™ncias de leitura
	fmt.Println("\n5. Testando prefer√™ncias de leitura...")

	preferences := []interfaces.ReadPreference{
		interfaces.ReadPreferenceSecondary,
		interfaces.ReadPreferenceSecondaryPreferred,
		interfaces.ReadPreferenceNearest,
	}

	for _, preference := range preferences {
		fmt.Printf("\n   Prefer√™ncia: %s\n", preference)

		replica, err := replicaManager.SelectReplica(ctx, preference)
		if err != nil {
			fmt.Printf("   Erro: %v\n", err)
			continue
		}

		fmt.Printf("   R√©plica selecionada: %s\n", replica.GetID())
	}

	// Simular mudan√ßas de status
	fmt.Println("\n6. Simulando mudan√ßas de status...")

	// Configurar callbacks
	replicaManager.OnReplicaHealthChange(func(replica interfaces.IReplicaInfo, oldStatus, newStatus interfaces.ReplicaStatus) {
		fmt.Printf("   üîÑ R√©plica %s mudou de %s para %s\n", replica.GetID(), oldStatus, newStatus)
	})

	// Marcar uma r√©plica como n√£o saud√°vel
	replica1, err := replicaManager.GetReplica("replica-1")
	if err == nil {
		replica1.MarkUnhealthy()
		fmt.Printf("   ‚ùå R√©plica %s marcada como n√£o saud√°vel\n", replica1.GetID())
	}

	// Marcar uma r√©plica como em manuten√ß√£o
	err = replicaManager.SetReplicaMaintenance("replica-2", true)
	if err == nil {
		fmt.Printf("   üîß R√©plica replica-2 em modo de manuten√ß√£o\n")
	}

	// Verificar r√©plicas saud√°veis
	fmt.Println("\n7. Verificando r√©plicas saud√°veis...")
	healthy := replicaManager.GetHealthyReplicas()
	fmt.Printf("   R√©plicas saud√°veis: %d\n", len(healthy))
	for _, replica := range healthy {
		fmt.Printf("   - %s (status: %s)\n", replica.GetID(), replica.GetStatus())
	}

	// Verificar r√©plicas n√£o saud√°veis
	unhealthy := replicaManager.GetUnhealthyReplicas()
	fmt.Printf("   R√©plicas n√£o saud√°veis: %d\n", len(unhealthy))
	for _, replica := range unhealthy {
		fmt.Printf("   - %s (status: %s)\n", replica.GetID(), replica.GetStatus())
	}

	// Mostrar estat√≠sticas
	fmt.Println("\n8. Estat√≠sticas do sistema...")
	stats := replicaManager.GetStats()
	fmt.Printf("   Total de r√©plicas: %d\n", stats.GetTotalReplicas())
	fmt.Printf("   R√©plicas saud√°veis: %d\n", stats.GetHealthyReplicas())
	fmt.Printf("   R√©plicas n√£o saud√°veis: %d\n", stats.GetUnhealthyReplicas())
	fmt.Printf("   R√©plicas em manuten√ß√£o: %d\n", stats.GetMaintenanceReplicas())
	fmt.Printf("   Total de queries: %d\n", stats.GetTotalQueries())
	fmt.Printf("   Uptime: %v\n", stats.GetUptime())

	// Recuperar r√©plica
	fmt.Println("\n9. Recuperando r√©plica...")
	if replica1 != nil {
		replica1.MarkHealthy()
		fmt.Printf("   ‚úÖ R√©plica %s recuperada\n", replica1.GetID())
	}

	// Verificar novamente
	healthy = replicaManager.GetHealthyReplicas()
	fmt.Printf("   R√©plicas saud√°veis ap√≥s recupera√ß√£o: %d\n", len(healthy))

	// Parar replica manager
	fmt.Println("\n10. Parando replica manager...")
	err = replicaManager.Stop(ctx)
	if err != nil {
		log.Printf("Erro ao parar replica manager: %v", err)
	} else {
		fmt.Println("‚úì Replica manager parado com sucesso")
	}

	fmt.Println("\n=== Demonstra√ß√£o conclu√≠da ===")
}
