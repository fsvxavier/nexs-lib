// Code generated by MockGen. DO NOT EDIT.
// Source: db/postgresql/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	postgresql "github.com/fsvxavier/nexs-lib/db/postgresql"
	config "github.com/fsvxavier/nexs-lib/db/postgresql/config"
	gomock "github.com/golang/mock/gomock"
)

// MockIConn is a mock of IConn interface.
type MockIConn struct {
	ctrl     *gomock.Controller
	recorder *MockIConnMockRecorder
}

// MockIConnMockRecorder is the mock recorder for MockIConn.
type MockIConnMockRecorder struct {
	mock *MockIConn
}

// NewMockIConn creates a new mock instance.
func NewMockIConn(ctrl *gomock.Controller) *MockIConn {
	mock := &MockIConn{ctrl: ctrl}
	mock.recorder = &MockIConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConn) EXPECT() *MockIConnMockRecorder {
	return m.recorder
}

// AfterAcquireHook mocks base method.
func (m *MockIConn) AfterAcquireHook(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterAcquireHook", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterAcquireHook indicates an expected call of AfterAcquireHook.
func (mr *MockIConnMockRecorder) AfterAcquireHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterAcquireHook", reflect.TypeOf((*MockIConn)(nil).AfterAcquireHook), ctx)
}

// BeforeReleaseHook mocks base method.
func (m *MockIConn) BeforeReleaseHook(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeReleaseHook", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeReleaseHook indicates an expected call of BeforeReleaseHook.
func (mr *MockIConnMockRecorder) BeforeReleaseHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeReleaseHook", reflect.TypeOf((*MockIConn)(nil).BeforeReleaseHook), ctx)
}

// BeginTransaction mocks base method.
func (m *MockIConn) BeginTransaction(ctx context.Context) (postgresql.ITransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(postgresql.ITransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockIConnMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockIConn)(nil).BeginTransaction), ctx)
}

// BeginTransactionWithOptions mocks base method.
func (m *MockIConn) BeginTransactionWithOptions(ctx context.Context, opts postgresql.TxOptions) (postgresql.ITransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransactionWithOptions", ctx, opts)
	ret0, _ := ret[0].(postgresql.ITransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransactionWithOptions indicates an expected call of BeginTransactionWithOptions.
func (mr *MockIConnMockRecorder) BeginTransactionWithOptions(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransactionWithOptions", reflect.TypeOf((*MockIConn)(nil).BeginTransactionWithOptions), ctx, opts)
}

// Exec mocks base method.
func (m *MockIConn) Exec(ctx context.Context, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockIConnMockRecorder) Exec(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIConn)(nil).Exec), varargs...)
}

// Listen mocks base method.
func (m *MockIConn) Listen(ctx context.Context, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockIConnMockRecorder) Listen(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockIConn)(nil).Listen), ctx, channel)
}

// Ping mocks base method.
func (m *MockIConn) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIConnMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIConn)(nil).Ping), ctx)
}

// Prepare mocks base method.
func (m *MockIConn) Prepare(ctx context.Context, name, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockIConnMockRecorder) Prepare(ctx, name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIConn)(nil).Prepare), ctx, name, query)
}

// Query mocks base method.
func (m *MockIConn) Query(ctx context.Context, query string, args ...interface{}) (postgresql.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(postgresql.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIConnMockRecorder) Query(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIConn)(nil).Query), varargs...)
}

// QueryAll mocks base method.
func (m *MockIConn) QueryAll(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dst, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAll indicates an expected call of QueryAll.
func (mr *MockIConnMockRecorder) QueryAll(ctx, dst, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dst, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAll", reflect.TypeOf((*MockIConn)(nil).QueryAll), varargs...)
}

// QueryCount mocks base method.
func (m *MockIConn) QueryCount(ctx context.Context, query string, args ...interface{}) (*int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCount", varargs...)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCount indicates an expected call of QueryCount.
func (mr *MockIConnMockRecorder) QueryCount(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCount", reflect.TypeOf((*MockIConn)(nil).QueryCount), varargs...)
}

// QueryOne mocks base method.
func (m *MockIConn) QueryOne(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dst, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockIConnMockRecorder) QueryOne(ctx, dst, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dst, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockIConn)(nil).QueryOne), varargs...)
}

// QueryRow mocks base method.
func (m *MockIConn) QueryRow(ctx context.Context, query string, args ...interface{}) (postgresql.IRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(postgresql.IRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIConnMockRecorder) QueryRow(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIConn)(nil).QueryRow), varargs...)
}

// Release mocks base method.
func (m *MockIConn) Release(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", ctx)
}

// Release indicates an expected call of Release.
func (mr *MockIConnMockRecorder) Release(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockIConn)(nil).Release), ctx)
}

// SendBatch mocks base method.
func (m *MockIConn) SendBatch(ctx context.Context, batch postgresql.IBatch) (postgresql.IBatchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, batch)
	ret0, _ := ret[0].(postgresql.IBatchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockIConnMockRecorder) SendBatch(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockIConn)(nil).SendBatch), ctx, batch)
}

// Unlisten mocks base method.
func (m *MockIConn) Unlisten(ctx context.Context, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlisten", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlisten indicates an expected call of Unlisten.
func (mr *MockIConnMockRecorder) Unlisten(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlisten", reflect.TypeOf((*MockIConn)(nil).Unlisten), ctx, channel)
}

// WaitForNotification mocks base method.
func (m *MockIConn) WaitForNotification(ctx context.Context, timeout time.Duration) (*postgresql.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForNotification", ctx, timeout)
	ret0, _ := ret[0].(*postgresql.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForNotification indicates an expected call of WaitForNotification.
func (mr *MockIConnMockRecorder) WaitForNotification(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForNotification", reflect.TypeOf((*MockIConn)(nil).WaitForNotification), ctx, timeout)
}

// MockIPool is a mock of IPool interface.
type MockIPool struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolMockRecorder
}

// MockIPoolMockRecorder is the mock recorder for MockIPool.
type MockIPoolMockRecorder struct {
	mock *MockIPool
}

// NewMockIPool creates a new mock instance.
func NewMockIPool(ctrl *gomock.Controller) *MockIPool {
	mock := &MockIPool{ctrl: ctrl}
	mock.recorder = &MockIPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPool) EXPECT() *MockIPoolMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockIPool) Acquire(ctx context.Context) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockIPoolMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockIPool)(nil).Acquire), ctx)
}

// AcquireWithTimeout mocks base method.
func (m *MockIPool) AcquireWithTimeout(ctx context.Context, timeout time.Duration) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireWithTimeout", ctx, timeout)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireWithTimeout indicates an expected call of AcquireWithTimeout.
func (mr *MockIPoolMockRecorder) AcquireWithTimeout(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireWithTimeout", reflect.TypeOf((*MockIPool)(nil).AcquireWithTimeout), ctx, timeout)
}

// Close mocks base method.
func (m *MockIPool) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPool)(nil).Close))
}

// GetConnWithNotPresent mocks base method.
func (m *MockIPool) GetConnWithNotPresent(ctx context.Context, conn postgresql.IConn) (postgresql.IConn, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnWithNotPresent", ctx, conn)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConnWithNotPresent indicates an expected call of GetConnWithNotPresent.
func (mr *MockIPoolMockRecorder) GetConnWithNotPresent(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnWithNotPresent", reflect.TypeOf((*MockIPool)(nil).GetConnWithNotPresent), ctx, conn)
}

// HealthCheck mocks base method.
func (m *MockIPool) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIPoolMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIPool)(nil).HealthCheck), ctx)
}

// Ping mocks base method.
func (m *MockIPool) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIPoolMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIPool)(nil).Ping), ctx)
}

// Stats mocks base method.
func (m *MockIPool) Stats() postgresql.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(postgresql.PoolStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockIPoolMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIPool)(nil).Stats))
}

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// AfterAcquireHook mocks base method.
func (m *MockITransaction) AfterAcquireHook(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterAcquireHook", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterAcquireHook indicates an expected call of AfterAcquireHook.
func (mr *MockITransactionMockRecorder) AfterAcquireHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterAcquireHook", reflect.TypeOf((*MockITransaction)(nil).AfterAcquireHook), ctx)
}

// BeforeReleaseHook mocks base method.
func (m *MockITransaction) BeforeReleaseHook(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeReleaseHook", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeReleaseHook indicates an expected call of BeforeReleaseHook.
func (mr *MockITransactionMockRecorder) BeforeReleaseHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeReleaseHook", reflect.TypeOf((*MockITransaction)(nil).BeforeReleaseHook), ctx)
}

// BeginTransaction mocks base method.
func (m *MockITransaction) BeginTransaction(ctx context.Context) (postgresql.ITransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(postgresql.ITransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockITransactionMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockITransaction)(nil).BeginTransaction), ctx)
}

// BeginTransactionWithOptions mocks base method.
func (m *MockITransaction) BeginTransactionWithOptions(ctx context.Context, opts postgresql.TxOptions) (postgresql.ITransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransactionWithOptions", ctx, opts)
	ret0, _ := ret[0].(postgresql.ITransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransactionWithOptions indicates an expected call of BeginTransactionWithOptions.
func (mr *MockITransactionMockRecorder) BeginTransactionWithOptions(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransactionWithOptions", reflect.TypeOf((*MockITransaction)(nil).BeginTransactionWithOptions), ctx, opts)
}

// Commit mocks base method.
func (m *MockITransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockITransactionMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockITransaction)(nil).Commit), ctx)
}

// Exec mocks base method.
func (m *MockITransaction) Exec(ctx context.Context, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockITransactionMockRecorder) Exec(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockITransaction)(nil).Exec), varargs...)
}

// Listen mocks base method.
func (m *MockITransaction) Listen(ctx context.Context, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockITransactionMockRecorder) Listen(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockITransaction)(nil).Listen), ctx, channel)
}

// Ping mocks base method.
func (m *MockITransaction) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockITransactionMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockITransaction)(nil).Ping), ctx)
}

// Prepare mocks base method.
func (m *MockITransaction) Prepare(ctx context.Context, name, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockITransactionMockRecorder) Prepare(ctx, name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockITransaction)(nil).Prepare), ctx, name, query)
}

// Query mocks base method.
func (m *MockITransaction) Query(ctx context.Context, query string, args ...interface{}) (postgresql.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(postgresql.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockITransactionMockRecorder) Query(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockITransaction)(nil).Query), varargs...)
}

// QueryAll mocks base method.
func (m *MockITransaction) QueryAll(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dst, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAll indicates an expected call of QueryAll.
func (mr *MockITransactionMockRecorder) QueryAll(ctx, dst, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dst, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAll", reflect.TypeOf((*MockITransaction)(nil).QueryAll), varargs...)
}

// QueryCount mocks base method.
func (m *MockITransaction) QueryCount(ctx context.Context, query string, args ...interface{}) (*int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCount", varargs...)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCount indicates an expected call of QueryCount.
func (mr *MockITransactionMockRecorder) QueryCount(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCount", reflect.TypeOf((*MockITransaction)(nil).QueryCount), varargs...)
}

// QueryOne mocks base method.
func (m *MockITransaction) QueryOne(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dst, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockITransactionMockRecorder) QueryOne(ctx, dst, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dst, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockITransaction)(nil).QueryOne), varargs...)
}

// QueryRow mocks base method.
func (m *MockITransaction) QueryRow(ctx context.Context, query string, args ...interface{}) (postgresql.IRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(postgresql.IRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockITransactionMockRecorder) QueryRow(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockITransaction)(nil).QueryRow), varargs...)
}

// Release mocks base method.
func (m *MockITransaction) Release(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", ctx)
}

// Release indicates an expected call of Release.
func (mr *MockITransactionMockRecorder) Release(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockITransaction)(nil).Release), ctx)
}

// ReleaseSavepoint mocks base method.
func (m *MockITransaction) ReleaseSavepoint(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSavepoint", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseSavepoint indicates an expected call of ReleaseSavepoint.
func (mr *MockITransactionMockRecorder) ReleaseSavepoint(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSavepoint", reflect.TypeOf((*MockITransaction)(nil).ReleaseSavepoint), ctx, name)
}

// Rollback mocks base method.
func (m *MockITransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockITransactionMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockITransaction)(nil).Rollback), ctx)
}

// RollbackToSavepoint mocks base method.
func (m *MockITransaction) RollbackToSavepoint(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToSavepoint", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToSavepoint indicates an expected call of RollbackToSavepoint.
func (mr *MockITransactionMockRecorder) RollbackToSavepoint(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToSavepoint", reflect.TypeOf((*MockITransaction)(nil).RollbackToSavepoint), ctx, name)
}

// Savepoint mocks base method.
func (m *MockITransaction) Savepoint(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Savepoint", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Savepoint indicates an expected call of Savepoint.
func (mr *MockITransactionMockRecorder) Savepoint(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Savepoint", reflect.TypeOf((*MockITransaction)(nil).Savepoint), ctx, name)
}

// SendBatch mocks base method.
func (m *MockITransaction) SendBatch(ctx context.Context, batch postgresql.IBatch) (postgresql.IBatchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, batch)
	ret0, _ := ret[0].(postgresql.IBatchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockITransactionMockRecorder) SendBatch(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockITransaction)(nil).SendBatch), ctx, batch)
}

// Unlisten mocks base method.
func (m *MockITransaction) Unlisten(ctx context.Context, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlisten", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlisten indicates an expected call of Unlisten.
func (mr *MockITransactionMockRecorder) Unlisten(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlisten", reflect.TypeOf((*MockITransaction)(nil).Unlisten), ctx, channel)
}

// WaitForNotification mocks base method.
func (m *MockITransaction) WaitForNotification(ctx context.Context, timeout time.Duration) (*postgresql.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForNotification", ctx, timeout)
	ret0, _ := ret[0].(*postgresql.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForNotification indicates an expected call of WaitForNotification.
func (mr *MockITransactionMockRecorder) WaitForNotification(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForNotification", reflect.TypeOf((*MockITransaction)(nil).WaitForNotification), ctx, timeout)
}

// MockIBatch is a mock of IBatch interface.
type MockIBatch struct {
	ctrl     *gomock.Controller
	recorder *MockIBatchMockRecorder
}

// MockIBatchMockRecorder is the mock recorder for MockIBatch.
type MockIBatchMockRecorder struct {
	mock *MockIBatch
}

// NewMockIBatch creates a new mock instance.
func NewMockIBatch(ctrl *gomock.Controller) *MockIBatch {
	mock := &MockIBatch{ctrl: ctrl}
	mock.recorder = &MockIBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBatch) EXPECT() *MockIBatchMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIBatch) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockIBatchMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIBatch)(nil).Clear))
}

// Len mocks base method.
func (m *MockIBatch) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockIBatchMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockIBatch)(nil).Len))
}

// Queue mocks base method.
func (m *MockIBatch) Queue(query string, arguments ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Queue", varargs...)
}

// Queue indicates an expected call of Queue.
func (mr *MockIBatchMockRecorder) Queue(query interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockIBatch)(nil).Queue), varargs...)
}

// MockIBatchResults is a mock of IBatchResults interface.
type MockIBatchResults struct {
	ctrl     *gomock.Controller
	recorder *MockIBatchResultsMockRecorder
}

// MockIBatchResultsMockRecorder is the mock recorder for MockIBatchResults.
type MockIBatchResultsMockRecorder struct {
	mock *MockIBatchResults
}

// NewMockIBatchResults creates a new mock instance.
func NewMockIBatchResults(ctrl *gomock.Controller) *MockIBatchResults {
	mock := &MockIBatchResults{ctrl: ctrl}
	mock.recorder = &MockIBatchResultsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBatchResults) EXPECT() *MockIBatchResultsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIBatchResults) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIBatchResultsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIBatchResults)(nil).Close))
}

// Err mocks base method.
func (m *MockIBatchResults) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIBatchResultsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIBatchResults)(nil).Err))
}

// Exec mocks base method.
func (m *MockIBatchResults) Exec() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockIBatchResultsMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIBatchResults)(nil).Exec))
}

// QueryAll mocks base method.
func (m *MockIBatchResults) QueryAll(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAll", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAll indicates an expected call of QueryAll.
func (mr *MockIBatchResultsMockRecorder) QueryAll(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAll", reflect.TypeOf((*MockIBatchResults)(nil).QueryAll), dst)
}

// QueryOne mocks base method.
func (m *MockIBatchResults) QueryOne(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOne", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockIBatchResultsMockRecorder) QueryOne(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockIBatchResults)(nil).QueryOne), dst)
}

// MockIRow is a mock of IRow interface.
type MockIRow struct {
	ctrl     *gomock.Controller
	recorder *MockIRowMockRecorder
}

// MockIRowMockRecorder is the mock recorder for MockIRow.
type MockIRowMockRecorder struct {
	mock *MockIRow
}

// NewMockIRow creates a new mock instance.
func NewMockIRow(ctrl *gomock.Controller) *MockIRow {
	mock := &MockIRow{ctrl: ctrl}
	mock.recorder = &MockIRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRow) EXPECT() *MockIRowMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockIRow) Scan(dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockIRowMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIRow)(nil).Scan), dest...)
}

// MockIRows is a mock of IRows interface.
type MockIRows struct {
	ctrl     *gomock.Controller
	recorder *MockIRowsMockRecorder
}

// MockIRowsMockRecorder is the mock recorder for MockIRows.
type MockIRowsMockRecorder struct {
	mock *MockIRows
}

// NewMockIRows creates a new mock instance.
func NewMockIRows(ctrl *gomock.Controller) *MockIRows {
	mock := &MockIRows{ctrl: ctrl}
	mock.recorder = &MockIRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRows) EXPECT() *MockIRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIRows) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRows)(nil).Close))
}

// Err mocks base method.
func (m *MockIRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIRows)(nil).Err))
}

// Next mocks base method.
func (m *MockIRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIRows)(nil).Next))
}

// RawValues mocks base method.
func (m *MockIRows) RawValues() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawValues")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// RawValues indicates an expected call of RawValues.
func (mr *MockIRowsMockRecorder) RawValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawValues", reflect.TypeOf((*MockIRows)(nil).RawValues))
}

// Scan mocks base method.
func (m *MockIRows) Scan(dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockIRowsMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIRows)(nil).Scan), dest...)
}

// MockIProvider is a mock of IProvider interface.
type MockIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderMockRecorder
}

// MockIProviderMockRecorder is the mock recorder for MockIProvider.
type MockIProviderMockRecorder struct {
	mock *MockIProvider
}

// NewMockIProvider creates a new mock instance.
func NewMockIProvider(ctrl *gomock.Controller) *MockIProvider {
	mock := &MockIProvider{ctrl: ctrl}
	mock.recorder = &MockIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvider) EXPECT() *MockIProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProvider)(nil).Close))
}

// CreateConnection mocks base method.
func (m *MockIProvider) CreateConnection(ctx context.Context, config *config.Config) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", ctx, config)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockIProviderMockRecorder) CreateConnection(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockIProvider)(nil).CreateConnection), ctx, config)
}

// CreatePool mocks base method.
func (m *MockIProvider) CreatePool(ctx context.Context, config *config.Config) (postgresql.IPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, config)
	ret0, _ := ret[0].(postgresql.IPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockIProviderMockRecorder) CreatePool(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockIProvider)(nil).CreatePool), ctx, config)
}

// GetMetrics mocks base method.
func (m *MockIProvider) GetMetrics(ctx context.Context) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockIProviderMockRecorder) GetMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockIProvider)(nil).GetMetrics), ctx)
}

// IsHealthy mocks base method.
func (m *MockIProvider) IsHealthy(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockIProviderMockRecorder) IsHealthy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockIProvider)(nil).IsHealthy), ctx)
}

// Name mocks base method.
func (m *MockIProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIProvider)(nil).Name))
}

// Type mocks base method.
func (m *MockIProvider) Type() postgresql.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(postgresql.ProviderType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockIProviderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIProvider)(nil).Type))
}

// Version mocks base method.
func (m *MockIProvider) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockIProviderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIProvider)(nil).Version))
}
