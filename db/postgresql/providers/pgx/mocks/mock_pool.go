//go:build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fsvxavier/nexs-lib/db/postgresql (interfaces: IPool)

package mocks

import (
	"context"
	"reflect"
	"time"

	"github.com/fsvxavier/nexs-lib/db/postgresql"
	"github.com/golang/mock/gomock"
)

// MockIPool is a mock of IPool interface.
type MockIPool struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolMockRecorder
}

// MockIPoolMockRecorder is the mock recorder for MockIPool.
type MockIPoolMockRecorder struct {
	mock *MockIPool
}

// NewMockIPool creates a new mock instance.
func NewMockIPool(ctrl *gomock.Controller) *MockIPool {
	mock := &MockIPool{ctrl: ctrl}
	mock.recorder = &MockIPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPool) EXPECT() *MockIPoolMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockIPool) Acquire(ctx context.Context) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockIPoolMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockIPool)(nil).Acquire), ctx)
}

// AcquireWithTimeout mocks base method.
func (m *MockIPool) AcquireWithTimeout(ctx context.Context, timeout time.Duration) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireWithTimeout", ctx, timeout)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireWithTimeout indicates an expected call of AcquireWithTimeout.
func (mr *MockIPoolMockRecorder) AcquireWithTimeout(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireWithTimeout", reflect.TypeOf((*MockIPool)(nil).AcquireWithTimeout), ctx, timeout)
}

// Close mocks base method.
func (m *MockIPool) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPool)(nil).Close))
}

// GetConnWithNotPresent mocks base method.
func (m *MockIPool) GetConnWithNotPresent(ctx context.Context, conn postgresql.IConn) (postgresql.IConn, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnWithNotPresent", ctx, conn)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConnWithNotPresent indicates an expected call of GetConnWithNotPresent.
func (mr *MockIPoolMockRecorder) GetConnWithNotPresent(ctx, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnWithNotPresent", reflect.TypeOf((*MockIPool)(nil).GetConnWithNotPresent), ctx, conn)
}

// HealthCheck mocks base method.
func (m *MockIPool) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIPoolMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIPool)(nil).HealthCheck), ctx)
}

// Ping mocks base method.
func (m *MockIPool) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIPoolMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIPool)(nil).Ping), ctx)
}

// Stats mocks base method.
func (m *MockIPool) Stats() postgresql.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(postgresql.PoolStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockIPoolMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIPool)(nil).Stats))
}
