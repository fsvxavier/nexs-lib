//go:build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fsvxavier/nexs-lib/db/postgresql (interfaces: IProvider)

package mocks

import (
	"context"
	"reflect"

	"github.com/fsvxavier/nexs-lib/db/postgresql"
	"github.com/fsvxavier/nexs-lib/db/postgresql/config"
	"github.com/golang/mock/gomock"
)

// MockIProvider is a mock of IProvider interface.
type MockIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderMockRecorder
}

// MockIProviderMockRecorder is the mock recorder for MockIProvider.
type MockIProviderMockRecorder struct {
	mock *MockIProvider
}

// NewMockIProvider creates a new mock instance.
func NewMockIProvider(ctrl *gomock.Controller) *MockIProvider {
	mock := &MockIProvider{ctrl: ctrl}
	mock.recorder = &MockIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvider) EXPECT() *MockIProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProvider)(nil).Close))
}

// CreateConnection mocks base method.
func (m *MockIProvider) CreateConnection(ctx context.Context, cfg *config.Config) (postgresql.IConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", ctx, cfg)
	ret0, _ := ret[0].(postgresql.IConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockIProviderMockRecorder) CreateConnection(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockIProvider)(nil).CreateConnection), ctx, cfg)
}

// CreatePool mocks base method.
func (m *MockIProvider) CreatePool(ctx context.Context, cfg *config.Config) (postgresql.IPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, cfg)
	ret0, _ := ret[0].(postgresql.IPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockIProviderMockRecorder) CreatePool(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockIProvider)(nil).CreatePool), ctx, cfg)
}

// GetStats mocks base method.
func (m *MockIProvider) GetStats() postgresql.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(postgresql.PoolStats)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockIProviderMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockIProvider)(nil).GetStats))
}

// HealthCheck mocks base method.
func (m *MockIProvider) HealthCheck(ctx context.Context, cfg *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx, cfg)
	ret0, _ := ret[1].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIProviderMockRecorder) HealthCheck(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIProvider)(nil).HealthCheck), ctx, cfg)
}

// Name mocks base method.
func (m *MockIProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIProvider)(nil).Name))
}

// Type mocks base method.
func (m *MockIProvider) Type() postgresql.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(postgresql.ProviderType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockIProviderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIProvider)(nil).Type))
}

// Version mocks base method.
func (m *MockIProvider) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockIProviderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIProvider)(nil).Version))
}
