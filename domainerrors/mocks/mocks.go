// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domainerrors "github.com/fsvxavier/nexs-lib/domainerrors/interfaces"
	gomock "github.com/golang/mock/gomock"
)

// MockErrorDomainInterface is a mock of ErrorDomainInterface interface.
type MockErrorDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockErrorDomainInterfaceMockRecorder
}

// MockErrorDomainInterfaceMockRecorder is the mock recorder for MockErrorDomainInterface.
type MockErrorDomainInterfaceMockRecorder struct {
	mock *MockErrorDomainInterface
}

// NewMockErrorDomainInterface creates a new mock instance.
func NewMockErrorDomainInterface(ctrl *gomock.Controller) *MockErrorDomainInterface {
	mock := &MockErrorDomainInterface{ctrl: ctrl}
	mock.recorder = &MockErrorDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorDomainInterface) EXPECT() *MockErrorDomainInterfaceMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockErrorDomainInterface) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockErrorDomainInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorDomainInterface)(nil).Error))
}

// HTTPStatus mocks base method.
func (m *MockErrorDomainInterface) HTTPStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatus indicates an expected call of HTTPStatus.
func (mr *MockErrorDomainInterfaceMockRecorder) HTTPStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPStatus", reflect.TypeOf((*MockErrorDomainInterface)(nil).HTTPStatus))
}

// StackTrace mocks base method.
func (m *MockErrorDomainInterface) StackTrace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackTrace")
	ret0, _ := ret[0].(string)
	return ret0
}

// StackTrace indicates an expected call of StackTrace.
func (mr *MockErrorDomainInterfaceMockRecorder) StackTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackTrace", reflect.TypeOf((*MockErrorDomainInterface)(nil).StackTrace))
}

// Type mocks base method.
func (m *MockErrorDomainInterface) Type() domainerrors.ErrorType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(domainerrors.ErrorType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockErrorDomainInterfaceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockErrorDomainInterface)(nil).Type))
}

// Unwrap mocks base method.
func (m *MockErrorDomainInterface) Unwrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockErrorDomainInterfaceMockRecorder) Unwrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockErrorDomainInterface)(nil).Unwrap))
}

// WithMetadata mocks base method.
func (m *MockErrorDomainInterface) WithMetadata(key string, value interface{}) domainerrors.ErrorDomainInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", key, value)
	ret0, _ := ret[0].(domainerrors.ErrorDomainInterface)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockErrorDomainInterfaceMockRecorder) WithMetadata(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockErrorDomainInterface)(nil).WithMetadata), key, value)
}

// MockErrorFactory is a mock of ErrorFactory interface.
type MockErrorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockErrorFactoryMockRecorder
}

// MockErrorFactoryMockRecorder is the mock recorder for MockErrorFactory.
type MockErrorFactoryMockRecorder struct {
	mock *MockErrorFactory
}

// NewMockErrorFactory creates a new mock instance.
func NewMockErrorFactory(ctrl *gomock.Controller) *MockErrorFactory {
	mock := &MockErrorFactory{ctrl: ctrl}
	mock.recorder = &MockErrorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorFactory) EXPECT() *MockErrorFactoryMockRecorder {
	return m.recorder
}

// CreateBusinessError mocks base method.
func (m *MockErrorFactory) CreateBusinessError(code, message string) domainerrors.BusinessErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBusinessError", code, message)
	ret0, _ := ret[0].(domainerrors.BusinessErrorInterface)
	return ret0
}

// CreateBusinessError indicates an expected call of CreateBusinessError.
func (mr *MockErrorFactoryMockRecorder) CreateBusinessError(code, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessError", reflect.TypeOf((*MockErrorFactory)(nil).CreateBusinessError), code, message)
}

// CreateCircuitBreakerError mocks base method.
func (m *MockErrorFactory) CreateCircuitBreakerError(circuitName, message string) domainerrors.CircuitBreakerErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircuitBreakerError", circuitName, message)
	ret0, _ := ret[0].(domainerrors.CircuitBreakerErrorInterface)
	return ret0
}

// CreateCircuitBreakerError indicates an expected call of CreateCircuitBreakerError.
func (mr *MockErrorFactoryMockRecorder) CreateCircuitBreakerError(circuitName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircuitBreakerError", reflect.TypeOf((*MockErrorFactory)(nil).CreateCircuitBreakerError), circuitName, message)
}

// CreateDatabaseError mocks base method.
func (m *MockErrorFactory) CreateDatabaseError(message string, cause error) domainerrors.DatabaseErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseError", message, cause)
	ret0, _ := ret[0].(domainerrors.DatabaseErrorInterface)
	return ret0
}

// CreateDatabaseError indicates an expected call of CreateDatabaseError.
func (mr *MockErrorFactoryMockRecorder) CreateDatabaseError(message, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseError", reflect.TypeOf((*MockErrorFactory)(nil).CreateDatabaseError), message, cause)
}

// CreateExternalServiceError mocks base method.
func (m *MockErrorFactory) CreateExternalServiceError(service, message string, cause error) domainerrors.ExternalServiceErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalServiceError", service, message, cause)
	ret0, _ := ret[0].(domainerrors.ExternalServiceErrorInterface)
	return ret0
}

// CreateExternalServiceError indicates an expected call of CreateExternalServiceError.
func (mr *MockErrorFactoryMockRecorder) CreateExternalServiceError(service, message, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalServiceError", reflect.TypeOf((*MockErrorFactory)(nil).CreateExternalServiceError), service, message, cause)
}

// CreateNotFoundError mocks base method.
func (m *MockErrorFactory) CreateNotFoundError(message string) domainerrors.NotFoundErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotFoundError", message)
	ret0, _ := ret[0].(domainerrors.NotFoundErrorInterface)
	return ret0
}

// CreateNotFoundError indicates an expected call of CreateNotFoundError.
func (mr *MockErrorFactoryMockRecorder) CreateNotFoundError(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotFoundError", reflect.TypeOf((*MockErrorFactory)(nil).CreateNotFoundError), message)
}

// CreateRateLimitError mocks base method.
func (m *MockErrorFactory) CreateRateLimitError(message string) domainerrors.RateLimitErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateLimitError", message)
	ret0, _ := ret[0].(domainerrors.RateLimitErrorInterface)
	return ret0
}

// CreateRateLimitError indicates an expected call of CreateRateLimitError.
func (mr *MockErrorFactoryMockRecorder) CreateRateLimitError(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitError", reflect.TypeOf((*MockErrorFactory)(nil).CreateRateLimitError), message)
}

// CreateTimeoutError mocks base method.
func (m *MockErrorFactory) CreateTimeoutError(operation, message string, cause error) domainerrors.TimeoutErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeoutError", operation, message, cause)
	ret0, _ := ret[0].(domainerrors.TimeoutErrorInterface)
	return ret0
}

// CreateTimeoutError indicates an expected call of CreateTimeoutError.
func (mr *MockErrorFactoryMockRecorder) CreateTimeoutError(operation, message, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeoutError", reflect.TypeOf((*MockErrorFactory)(nil).CreateTimeoutError), operation, message, cause)
}

// CreateValidationError mocks base method.
func (m *MockErrorFactory) CreateValidationError(message string, cause error) domainerrors.ValidationErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValidationError", message, cause)
	ret0, _ := ret[0].(domainerrors.ValidationErrorInterface)
	return ret0
}

// CreateValidationError indicates an expected call of CreateValidationError.
func (mr *MockErrorFactoryMockRecorder) CreateValidationError(message, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValidationError", reflect.TypeOf((*MockErrorFactory)(nil).CreateValidationError), message, cause)
}

// MockErrorRegistry is a mock of ErrorRegistry interface.
type MockErrorRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRegistryMockRecorder
}

// MockErrorRegistryMockRecorder is the mock recorder for MockErrorRegistry.
type MockErrorRegistryMockRecorder struct {
	mock *MockErrorRegistry
}

// NewMockErrorRegistry creates a new mock instance.
func NewMockErrorRegistry(ctrl *gomock.Controller) *MockErrorRegistry {
	mock := &MockErrorRegistry{ctrl: ctrl}
	mock.recorder = &MockErrorRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorRegistry) EXPECT() *MockErrorRegistryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockErrorRegistry) Get(code string) (domainerrors.ErrorCodeInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(domainerrors.ErrorCodeInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockErrorRegistryMockRecorder) Get(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockErrorRegistry)(nil).Get), code)
}

// Register mocks base method.
func (m *MockErrorRegistry) Register(code, description string, httpStatus int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", code, description, httpStatus)
}

// Register indicates an expected call of Register.
func (mr *MockErrorRegistryMockRecorder) Register(code, description, httpStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockErrorRegistry)(nil).Register), code, description, httpStatus)
}

// WrapWithCode mocks base method.
func (m *MockErrorRegistry) WrapWithCode(code string, err error) domainerrors.ErrorDomainInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapWithCode", code, err)
	ret0, _ := ret[0].(domainerrors.ErrorDomainInterface)
	return ret0
}

// WrapWithCode indicates an expected call of WrapWithCode.
func (mr *MockErrorRegistryMockRecorder) WrapWithCode(code, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapWithCode", reflect.TypeOf((*MockErrorRegistry)(nil).WrapWithCode), code, err)
}

// MockErrorAnalyzer is a mock of ErrorAnalyzer interface.
type MockErrorAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockErrorAnalyzerMockRecorder
}

// MockErrorAnalyzerMockRecorder is the mock recorder for MockErrorAnalyzer.
type MockErrorAnalyzerMockRecorder struct {
	mock *MockErrorAnalyzer
}

// NewMockErrorAnalyzer creates a new mock instance.
func NewMockErrorAnalyzer(ctrl *gomock.Controller) *MockErrorAnalyzer {
	mock := &MockErrorAnalyzer{ctrl: ctrl}
	mock.recorder = &MockErrorAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorAnalyzer) EXPECT() *MockErrorAnalyzerMockRecorder {
	return m.recorder
}

// GetErrorChain mocks base method.
func (m *MockErrorAnalyzer) GetErrorChain(err error) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorChain", err)
	ret0, _ := ret[0].([]error)
	return ret0
}

// GetErrorChain indicates an expected call of GetErrorChain.
func (mr *MockErrorAnalyzerMockRecorder) GetErrorChain(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorChain", reflect.TypeOf((*MockErrorAnalyzer)(nil).GetErrorChain), err)
}

// GetRootCause mocks base method.
func (m *MockErrorAnalyzer) GetRootCause(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCause", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRootCause indicates an expected call of GetRootCause.
func (mr *MockErrorAnalyzerMockRecorder) GetRootCause(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCause", reflect.TypeOf((*MockErrorAnalyzer)(nil).GetRootCause), err)
}

// IsRetryable mocks base method.
func (m *MockErrorAnalyzer) IsRetryable(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryable", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryable indicates an expected call of IsRetryable.
func (mr *MockErrorAnalyzerMockRecorder) IsRetryable(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryable", reflect.TypeOf((*MockErrorAnalyzer)(nil).IsRetryable), err)
}

// IsTemporary mocks base method.
func (m *MockErrorAnalyzer) IsTemporary(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTemporary", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTemporary indicates an expected call of IsTemporary.
func (mr *MockErrorAnalyzerMockRecorder) IsTemporary(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockErrorAnalyzer)(nil).IsTemporary), err)
}
