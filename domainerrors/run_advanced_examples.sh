#!/bin/bash

# Script para executar exemplos das funcionalidades avan√ßadas do domainerrors

echo "üöÄ Executando Exemplos das Funcionalidades Avan√ßadas - Domain Errors"
echo "=================================================================="

# Fun√ß√£o para executar exemplo com tratamento de erro
run_example() {
    local example_name="$1"
    local example_path="$2"
    
    echo ""
    echo "üìÅ Executando: $example_name"
    echo "-----------------------------------"
    
    if [ -d "$example_path" ]; then
        cd "$example_path" || {
            echo "‚ùå Erro: N√£o foi poss√≠vel acessar $example_path"
            return 1
        }
        
        if go run . ; then
            echo "‚úÖ $example_name executado com sucesso!"
        else
            echo "‚ùå Erro ao executar $example_name"
            return 1
        fi
        
        cd - > /dev/null || exit 1
    else
        echo "‚ùå Erro: Diret√≥rio $example_path n√£o encontrado"
        return 1
    fi
}

# Navegar para diret√≥rio base do domainerrors
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR" || {
    echo "‚ùå Erro: N√£o foi poss√≠vel acessar o diret√≥rio do script"
    exit 1
}

echo "üìç Diret√≥rio atual: $(pwd)"

# Executar testes primeiro
echo ""
echo "üß™ Executando Testes"
echo "-------------------"
if go test ./advanced -v; then
    echo "‚úÖ Todos os testes passaram!"
else
    echo "‚ùå Alguns testes falharam"
    echo "Continuando com exemplos..."
fi

# Executar benchmarks
echo ""
echo "üìä Executando Benchmarks de Performance"
echo "---------------------------------------"
if go test ./advanced -bench=BenchmarkAdvancedFeatures -benchmem -count=1 -timeout=30s; then
    echo "‚úÖ Benchmarks executados com sucesso!"
else
    echo "‚ö†Ô∏è Alguns benchmarks podem ter falhado"
fi

# Executar exemplos
echo ""
echo "üìã Executando Exemplos"
echo "======================="

# Lista de exemplos para executar
examples=(
    "B√°sico:examples/basic"
    "Global Hooks:examples/global"
    "Avan√ßado:examples/advanced"
    "Outros Casos:examples/outros"
    "Funcionalidades Avan√ßadas:examples/advanced_features"
)

# Contador de sucessos e falhas
successful=0
failed=0

# Executar cada exemplo
for example in "${examples[@]}"; do
    IFS=':' read -r name path <<< "$example"
    
    if run_example "$name" "$path"; then
        ((successful++))
    else
        ((failed++))
    fi
done

# Resumo final
echo ""
echo "üìà RESUMO DA EXECU√á√ÉO"
echo "====================="
echo "‚úÖ Exemplos executados com sucesso: $successful"
echo "‚ùå Exemplos com falhas: $failed"
echo "üìä Total de exemplos: $((successful + failed))"

if [ $failed -eq 0 ]; then
    echo ""
    echo "üéâ Todos os exemplos foram executados com sucesso!"
    echo ""
    echo "üéØ Funcionalidades Demonstradas:"
    echo "  ‚Ä¢ Error Aggregation - Agrega√ß√£o inteligente de erros"
    echo "  ‚Ä¢ Conditional Hooks - Hooks baseados em condi√ß√µes"
    echo "  ‚Ä¢ Retry Mechanism - Sistema de retry com backoff"
    echo "  ‚Ä¢ Error Recovery - Recupera√ß√£o autom√°tica de erros"
    echo "  ‚Ä¢ Performance Pools - Otimiza√ß√µes de mem√≥ria"
    echo "  ‚Ä¢ Lazy Stack Traces - Captura otimizada de stack"
    echo "  ‚Ä¢ String Interning - Otimiza√ß√£o de strings comuns"
    echo ""
    echo "üìö Para mais informa√ß√µes, consulte:"
    echo "  ‚Ä¢ README.md - Documenta√ß√£o principal"
    echo "  ‚Ä¢ NEXT_STEPS.md - Roadmap de funcionalidades"
    echo "  ‚Ä¢ examples/*/README.md - Documenta√ß√£o espec√≠fica"
    echo ""
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è Alguns exemplos falharam. Verifique os logs acima."
    exit 1
fi
