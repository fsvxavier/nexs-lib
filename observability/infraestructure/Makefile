# Nexs Observability infraestructure Makefile

.PHONY: help infra-up infra-down infra-logs infra-status infra-clean infra-reset test-integration

# Default target
help: ## Show this help message
	@echo "Nexs Observability infraestructure Commands:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Service Groups:"
	@echo "  make infra-up GROUP=tracer     # Start only tracing services"
	@echo "  make infra-up GROUP=logger     # Start only logging services"  
	@echo "  make infra-up GROUP=metrics    # Start only metrics services"
	@echo "  make infra-up GROUP=databases  # Start only databases"

# infraestructure management
infra-up: ## Start observability infraestructure
	@echo "üöÄ Starting Nexs Observability infraestructure..."
	@cd infraestructure && ./manage.sh up $(GROUP)

infra-down: ## Stop observability infraestructure
	@echo "üõë Stopping Nexs Observability infraestructure..."
	@cd infraestructure && ./manage.sh down

infra-restart: ## Restart observability infraestructure
	@echo "üîÑ Restarting Nexs Observability infraestructure..."
	@cd infraestructure && ./manage.sh restart

infra-logs: ## Show infraestructure logs (SERVICE=service_name optional)
	@cd infraestructure && ./manage.sh logs $(SERVICE)

infra-status: ## Show infraestructure status
	@cd infraestructure && ./manage.sh status

infra-clean: ## Clean up infraestructure (removes volumes)
	@echo "üßπ Cleaning up Nexs Observability infraestructure..."
	@cd infraestructure && ./manage.sh clean

infra-reset: ## Reset infraestructure (clean + restart)
	@echo "üîÑ Resetting Nexs Observability infraestructure..."
	@cd infraestructure && ./manage.sh reset

infra-urls: ## Show service URLs
	@cd infraestructure && ./manage.sh urls

infra-health: ## Check infraestructure health
	@cd infraestructure && ./manage.sh health

# Development workflows
dev-setup: infra-up ## Setup complete development environment
	@echo "‚úÖ Development environment ready!"
	@echo ""
	@make infra-urls

dev-tracer: ## Start only tracer development environment
	@make infra-up GROUP=tracer
	@make infra-up GROUP=databases

dev-logger: ## Start only logger development environment  
	@make infra-up GROUP=logger
	@make infra-up GROUP=databases

dev-metrics: ## Start only metrics development environment
	@make infra-up GROUP=metrics

# Testing with infraestructure
test-integration: infra-up ## Run integration tests with infraestructure
	@echo "üß™ Running integration tests..."
	@sleep 10  # Wait for services to be ready
	@cd tracer && go test -tags=integration -v -timeout=60s ./...
	@cd logger && go test -tags=integration -v -timeout=60s ./...

test-integration-tracer: ## Run tracer integration tests
	@make infra-up GROUP=tracer
	@make infra-up GROUP=databases  
	@echo "üß™ Running tracer integration tests..."
	@sleep 10
	@cd tracer && go test -tags=integration -v -timeout=60s ./...

test-integration-logger: ## Run logger integration tests
	@make infra-up GROUP=logger
	@make infra-up GROUP=databases
	@echo "üß™ Running logger integration tests..."
	@sleep 10
	@cd logger && go test -tags=integration -v -timeout=60s ./...

# Example testing
test-examples: infra-up ## Test all examples against infraestructure
	@echo "üß™ Testing examples against infraestructure..."
	@sleep 15  # Wait for all services
	@$(MAKE) test-tracer-examples
	@$(MAKE) test-logger-examples

test-tracer-examples: ## Test tracer examples
	@echo "üîç Testing tracer examples..."
	@cd tracer/examples && for dir in */; do \
		echo "Testing $$dir..."; \
		cd $$dir && timeout 30s go run main.go & \
		PID=$$!; sleep 5; \
		curl -f http://localhost:8080/health || echo "‚ùå $$dir failed"; \
		kill $$PID 2>/dev/null || true; \
		cd ..; \
	done

test-logger-examples: ## Test logger examples (if any)
	@echo "üìù Testing logger examples..."
	@echo "Logger examples testing not yet implemented"

# Monitoring
monitor-traces: ## Monitor traces in Jaeger UI
	@echo "üîç Opening Jaeger UI for trace monitoring..."
	@open http://localhost:16686 || xdg-open http://localhost:16686 || echo "Open http://localhost:16686 manually"

monitor-metrics: ## Monitor metrics in Grafana
	@echo "üìä Opening Grafana for metrics monitoring..."
	@open http://localhost:3000 || xdg-open http://localhost:3000 || echo "Open http://localhost:3000 manually (admin/nexs123)"

monitor-logs: ## Monitor logs in Kibana
	@echo "üìù Opening Kibana for log monitoring..."
	@open http://localhost:5601 || xdg-open http://localhost:5601 || echo "Open http://localhost:5601 manually"

# Cleanup and maintenance
clean-all: infra-clean ## Clean everything including Go mod cache
	@echo "üßπ Cleaning Go modules..."
	@go clean -modcache
	@go clean -cache

# Quick development commands
quick-start: ## Quick start for development (tracer + databases)
	@make infra-up GROUP=tracer
	@make infra-up GROUP=databases
	@echo "‚ö° Quick development environment ready!"

quick-full: ## Quick start full stack
	@make infra-up
	@echo "üöÄ Full observability stack ready!"
	@make infra-urls

# Docker specific commands
docker-prune: ## Prune Docker system (careful!)
	@echo "üßπ Pruning Docker system..."
	@docker system prune -f
	@docker volume prune -f

docker-logs: ## Show all Docker logs
	@docker-compose -f infraestructure/docker-compose.yml logs

# Environment validation
validate-env: ## Validate environment setup
	@echo "üîç Validating environment..."
	@command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker not found"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose not found"; exit 1; }
	@command -v go >/dev/null 2>&1 || { echo "‚ùå Go not found"; exit 1; }
	@command -v curl >/dev/null 2>&1 || { echo "‚ùå curl not found"; exit 1; }
	@echo "‚úÖ Environment validation passed!"

# Performance testing
perf-test: infra-up ## Run performance tests against infraestructure
	@echo "‚ö° Running performance tests..."
	@sleep 15
	@cd tracer && go test -bench=. -benchmem ./...

# Default target when no target is specified
.DEFAULT_GOAL := help
