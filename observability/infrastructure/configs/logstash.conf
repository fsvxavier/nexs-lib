input {
  beats {
    port => 5044
  }

  tcp {
    port => 5000
    codec => json_lines
  }

  udp {
    port => 5000
    codec => json_lines
  }

  # HTTP input for direct log shipping
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse JSON logs
  if [message] {
    json {
      source => "message"
    }
  }

  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Parse trace information
  if [trace_id] {
    mutate {
      add_field => { "nexs_trace_id" => "%{trace_id}" }
    }
  }

  if [span_id] {
    mutate {
      add_field => { "nexs_span_id" => "%{span_id}" }
    }
  }

  # Add infrastructure tags
  mutate {
    add_field => { 
      "nexs_infrastructure" => "docker-compose"
      "nexs_environment" => "development"
    }
  }

  # Parse log levels
  if [level] {
    mutate {
      lowercase => [ "level" ]
    }
  }

  # Add service information
  if [service] {
    mutate {
      add_field => { "nexs_service" => "%{service}" }
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "nexs-logs-%{+YYYY.MM.dd}"
    template_name => "nexs-logs"
    template_pattern => "nexs-logs-*"
    template => {
      "index_patterns" => ["nexs-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "nexs_trace_id" => { "type" => "keyword" }
          "nexs_span_id" => { "type" => "keyword" }
          "nexs_service" => { "type" => "keyword" }
          "nexs_infrastructure" => { "type" => "keyword" }
          "nexs_environment" => { "type" => "keyword" }
        }
      }
    }
  }

  # Debug output
  stdout {
    codec => rubydebug
  }
}
