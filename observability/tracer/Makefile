# Makefile para o ISIS Golang Tracer

.PHONY: help build test bench clean setup-env start-env stop-env examples lint

# Vari√°veis
GOPATH ?= $(shell go env GOPATH)
GOBIN ?= $(GOPATH)/bin

# Help
help: ## Mostra esta ajuda
	@echo "Comandos dispon√≠veis:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Build
build: ## Compila o c√≥digo
	@echo "üî® Compilando..."
	go build -v ./tracer/...

# Test
test: ## Executa os testes
	@echo "üß™ Executando testes..."
	go test -v ./tracer/...

# Benchmark
bench: ## Executa benchmarks
	@echo "‚ö° Executando benchmarks..."
	go test -bench=. -benchmem ./tracer/...

# Test com coverage
test-coverage: ## Executa testes com coverage
	@echo "üìä Executando testes com coverage..."
	go test -coverprofile=coverage.out ./tracer/...
	go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report gerado em coverage.html"

# Clean
clean: ## Limpa arquivos tempor√°rios
	@echo "üßπ Limpando..."
	go clean -testcache
	rm -f coverage.out coverage.html

# Setup do ambiente de desenvolvimento
setup-env: ## Configura o ambiente de desenvolvimento
	@echo "üöÄ Configurando ambiente..."
	@if command -v docker > /dev/null 2>&1; then \
		echo "‚úÖ Docker encontrado"; \
	else \
		echo "‚ùå Docker n√£o encontrado. Instale o Docker primeiro."; \
		exit 1; \
	fi
	@if [ -f ./tracer/setup.sh ]; then \
		chmod +x ./tracer/setup.sh; \
		cd tracer && ./setup.sh; \
	else \
		echo "‚ùå Script setup.sh n√£o encontrado"; \
		exit 1; \
	fi

# Inicia o ambiente
start-env: ## Inicia os servi√ßos de tracing
	@echo "üê≥ Iniciando ambiente..."
	cd tracer && docker-compose up -d

# Para o ambiente
stop-env: ## Para os servi√ßos de tracing
	@echo "üõë Parando ambiente..."
	cd tracer && docker-compose down

# Logs do ambiente
logs-env: ## Mostra logs dos servi√ßos
	@echo "üìã Mostrando logs..."
	cd tracer && docker-compose logs -f

# Status do ambiente
status-env: ## Mostra status dos servi√ßos
	@echo "üìä Status dos servi√ßos:"
	cd tracer && docker-compose ps

# Executa exemplos
examples: ## Executa os exemplos
	@echo "üß™ Executando exemplos..."
	go run ./tracer/examples

# Lint
lint: ## Executa linting
	@echo "üîç Executando linting..."
	@if command -v golangci-lint > /dev/null 2>&1; then \
		golangci-lint run ./tracer/...; \
	else \
		echo "‚ö†Ô∏è  golangci-lint n√£o encontrado. Executando go vet..."; \
		go vet ./tracer/...; \
	fi

# Formata c√≥digo
fmt: ## Formata o c√≥digo
	@echo "üíÑ Formatando c√≥digo..."
	go fmt ./tracer/...

# Moderniza m√≥dulos
mod-tidy: ## Limpa e atualiza go.mod
	@echo "üì¶ Limpando m√≥dulos..."
	go mod tidy

# Atualiza depend√™ncias
mod-update: ## Atualiza todas as depend√™ncias
	@echo "üîÑ Atualizando depend√™ncias..."
	go get -u ./tracer/...
	go mod tidy

# Verifica vulnerabilidades
security: ## Verifica vulnerabilidades
	@echo "üîí Verificando vulnerabilidades..."
	@if command -v govulncheck > /dev/null 2>&1; then \
		govulncheck ./tracer/...; \
	else \
		echo "‚ö†Ô∏è  govulncheck n√£o encontrado. Instale com: go install golang.org/x/vuln/cmd/govulncheck@latest"; \
	fi

# Gera documenta√ß√£o
docs: ## Gera documenta√ß√£o
	@echo "üìö Gerando documenta√ß√£o..."
	@if command -v godoc > /dev/null 2>&1; then \
		echo "Acesse http://localhost:6060/pkg/github.com/fsvxavier/nexs-lib/tracer/"; \
		godoc -http=:6060; \
	else \
		echo "‚ö†Ô∏è  godoc n√£o encontrado. Instale com: go install golang.org/x/tools/cmd/godoc@latest"; \
	fi

# Instala√ß√£o completa
install: mod-tidy build test ## Instala√ß√£o completa (tidy + build + test)
	@echo "‚úÖ Instala√ß√£o completa realizada com sucesso!"

# CI Pipeline
ci: lint test bench ## Pipeline de CI (lint + test + bench)
	@echo "‚úÖ Pipeline de CI executada com sucesso!"

# Release checklist
release-check: ci test-coverage security ## Checklist de release
	@echo "‚úÖ Checklist de release executada com sucesso!"
	@echo "üìã Arquivos de release:"
	@echo "   - coverage.html (coverage report)"
	@echo "   - ./tracer/ (c√≥digo principal)"
	@echo "   - ./tracer/README.md (documenta√ß√£o)"
	@echo "   - ./tracer/examples/ (exemplos)"

# Debug
debug: ## Mostra informa√ß√µes de debug
	@echo "üêõ Informa√ß√µes de debug:"
	@echo "GOPATH: $(GOPATH)"
	@echo "GOBIN: $(GOBIN)"
	@echo "GOOS: $(shell go env GOOS)"
	@echo "GOARCH: $(shell go env GOARCH)"
	@echo "Go version: $(shell go version)"
	@echo "Docker version:"
	@docker --version || echo "Docker n√£o encontrado"
	@echo "Estrutura do projeto:"
	@find ./tracer -name "*.go" | head -10

# All
all: clean mod-tidy build test examples ## Executa tudo (clean + tidy + build + test + examples)
