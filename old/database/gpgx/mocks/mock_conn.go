// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gpgx "github.com/dock-tech/isis-golang-lib/database/gpgx"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// IConn is an autogenerated mock type for the IConn type
type IConn struct {
	mock.Mock
}

type IConn_Expecter struct {
	mock *mock.Mock
}

func (_m *IConn) EXPECT() *IConn_Expecter {
	return &IConn_Expecter{mock: &_m.Mock}
}

// AfterAcquireHook provides a mock function with given fields: ctx
func (_m *IConn) AfterAcquireHook(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AfterAcquireHook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_AfterAcquireHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterAcquireHook'
type IConn_AfterAcquireHook_Call struct {
	*mock.Call
}

// AfterAcquireHook is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IConn_Expecter) AfterAcquireHook(ctx interface{}) *IConn_AfterAcquireHook_Call {
	return &IConn_AfterAcquireHook_Call{Call: _e.mock.On("AfterAcquireHook", ctx)}
}

func (_c *IConn_AfterAcquireHook_Call) Run(run func(ctx context.Context)) *IConn_AfterAcquireHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IConn_AfterAcquireHook_Call) Return(err error) *IConn_AfterAcquireHook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IConn_AfterAcquireHook_Call) RunAndReturn(run func(context.Context) error) *IConn_AfterAcquireHook_Call {
	_c.Call.Return(run)
	return _c
}

// BeforeReleaseHook provides a mock function with given fields: ctx
func (_m *IConn) BeforeReleaseHook(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeforeReleaseHook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_BeforeReleaseHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeforeReleaseHook'
type IConn_BeforeReleaseHook_Call struct {
	*mock.Call
}

// BeforeReleaseHook is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IConn_Expecter) BeforeReleaseHook(ctx interface{}) *IConn_BeforeReleaseHook_Call {
	return &IConn_BeforeReleaseHook_Call{Call: _e.mock.On("BeforeReleaseHook", ctx)}
}

func (_c *IConn_BeforeReleaseHook_Call) Run(run func(ctx context.Context)) *IConn_BeforeReleaseHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IConn_BeforeReleaseHook_Call) Return(err error) *IConn_BeforeReleaseHook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IConn_BeforeReleaseHook_Call) RunAndReturn(run func(context.Context) error) *IConn_BeforeReleaseHook_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *IConn) BeginTransaction(ctx context.Context) (gpgx.ITransaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 gpgx.ITransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (gpgx.ITransaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) gpgx.ITransaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.ITransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type IConn_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IConn_Expecter) BeginTransaction(ctx interface{}) *IConn_BeginTransaction_Call {
	return &IConn_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *IConn_BeginTransaction_Call) Run(run func(ctx context.Context)) *IConn_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IConn_BeginTransaction_Call) Return(_a0 gpgx.ITransaction, _a1 error) *IConn_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_BeginTransaction_Call) RunAndReturn(run func(context.Context) (gpgx.ITransaction, error)) *IConn_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *IConn) Exec(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type IConn_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *IConn_Exec_Call {
	return &IConn_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IConn_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IConn_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_Exec_Call) Return(_a0 error) *IConn_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IConn_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *IConn_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *IConn) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type IConn_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IConn_Expecter) Ping(ctx interface{}) *IConn_Ping_Call {
	return &IConn_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *IConn_Ping_Call) Run(run func(ctx context.Context)) *IConn_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IConn_Ping_Call) Return(_a0 error) *IConn_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IConn_Ping_Call) RunAndReturn(run func(context.Context) error) *IConn_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *IConn) Query(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type IConn_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *IConn_Query_Call {
	return &IConn_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IConn_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IConn_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_Query_Call) Return(_a0 pgx.Rows, _a1 error) *IConn_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgx.Rows, error)) *IConn_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryAll provides a mock function with given fields: ctx, dst, query, args
func (_m *IConn) QueryAll(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dst, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dst, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_QueryAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryAll'
type IConn_QueryAll_Call struct {
	*mock.Call
}

// QueryAll is a helper method to define mock.On call
//   - ctx context.Context
//   - dst interface{}
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) QueryAll(ctx interface{}, dst interface{}, query interface{}, args ...interface{}) *IConn_QueryAll_Call {
	return &IConn_QueryAll_Call{Call: _e.mock.On("QueryAll",
		append([]interface{}{ctx, dst, query}, args...)...)}
}

func (_c *IConn_QueryAll_Call) Run(run func(ctx context.Context, dst interface{}, query string, args ...interface{})) *IConn_QueryAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_QueryAll_Call) Return(_a0 error) *IConn_QueryAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IConn_QueryAll_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *IConn_QueryAll_Call {
	_c.Call.Return(run)
	return _c
}

// QueryCount provides a mock function with given fields: ctx, query, args
func (_m *IConn) QueryCount(ctx context.Context, query string, args ...interface{}) (*int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryCount")
	}

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*int, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *int); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_QueryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCount'
type IConn_QueryCount_Call struct {
	*mock.Call
}

// QueryCount is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) QueryCount(ctx interface{}, query interface{}, args ...interface{}) *IConn_QueryCount_Call {
	return &IConn_QueryCount_Call{Call: _e.mock.On("QueryCount",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IConn_QueryCount_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IConn_QueryCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_QueryCount_Call) Return(_a0 *int, _a1 error) *IConn_QueryCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_QueryCount_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*int, error)) *IConn_QueryCount_Call {
	_c.Call.Return(run)
	return _c
}

// QueryOne provides a mock function with given fields: ctx, dst, query, args
func (_m *IConn) QueryOne(ctx context.Context, dst interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dst, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dst, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IConn_QueryOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryOne'
type IConn_QueryOne_Call struct {
	*mock.Call
}

// QueryOne is a helper method to define mock.On call
//   - ctx context.Context
//   - dst interface{}
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) QueryOne(ctx interface{}, dst interface{}, query interface{}, args ...interface{}) *IConn_QueryOne_Call {
	return &IConn_QueryOne_Call{Call: _e.mock.On("QueryOne",
		append([]interface{}{ctx, dst, query}, args...)...)}
}

func (_c *IConn_QueryOne_Call) Run(run func(ctx context.Context, dst interface{}, query string, args ...interface{})) *IConn_QueryOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_QueryOne_Call) Return(_a0 error) *IConn_QueryOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IConn_QueryOne_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *IConn_QueryOne_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, query, args
func (_m *IConn) QueryRow(ctx context.Context, query string, args ...interface{}) (gpgx.IRow, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 gpgx.IRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (gpgx.IRow, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) gpgx.IRow); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.IRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type IConn_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *IConn_QueryRow_Call {
	return &IConn_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IConn_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IConn_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_QueryRow_Call) Return(_a0 gpgx.IRow, _a1 error) *IConn_QueryRow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (gpgx.IRow, error)) *IConn_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRows provides a mock function with given fields: ctx, query, args
func (_m *IConn) QueryRows(ctx context.Context, query string, args ...interface{}) (gpgx.IRows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRows")
	}

	var r0 gpgx.IRows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (gpgx.IRows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) gpgx.IRows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.IRows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_QueryRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRows'
type IConn_QueryRows_Call struct {
	*mock.Call
}

// QueryRows is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IConn_Expecter) QueryRows(ctx interface{}, query interface{}, args ...interface{}) *IConn_QueryRows_Call {
	return &IConn_QueryRows_Call{Call: _e.mock.On("QueryRows",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IConn_QueryRows_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IConn_QueryRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IConn_QueryRows_Call) Return(_a0 gpgx.IRows, _a1 error) *IConn_QueryRows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_QueryRows_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (gpgx.IRows, error)) *IConn_QueryRows_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx
func (_m *IConn) Release(ctx context.Context) {
	_m.Called(ctx)
}

// IConn_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type IConn_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IConn_Expecter) Release(ctx interface{}) *IConn_Release_Call {
	return &IConn_Release_Call{Call: _e.mock.On("Release", ctx)}
}

func (_c *IConn_Release_Call) Run(run func(ctx context.Context)) *IConn_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IConn_Release_Call) Return() *IConn_Release_Call {
	_c.Call.Return()
	return _c
}

func (_c *IConn_Release_Call) RunAndReturn(run func(context.Context)) *IConn_Release_Call {
	_c.Run(run)
	return _c
}

// SendBatch provides a mock function with given fields: ctx, batch
func (_m *IConn) SendBatch(ctx context.Context, batch gpgx.IBatch) (gpgx.IBatchResults, error) {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 gpgx.IBatchResults
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gpgx.IBatch) (gpgx.IBatchResults, error)); ok {
		return rf(ctx, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gpgx.IBatch) gpgx.IBatchResults); ok {
		r0 = rf(ctx, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.IBatchResults)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gpgx.IBatch) error); ok {
		r1 = rf(ctx, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IConn_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type IConn_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batch gpgx.IBatch
func (_e *IConn_Expecter) SendBatch(ctx interface{}, batch interface{}) *IConn_SendBatch_Call {
	return &IConn_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, batch)}
}

func (_c *IConn_SendBatch_Call) Run(run func(ctx context.Context, batch gpgx.IBatch)) *IConn_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gpgx.IBatch))
	})
	return _c
}

func (_c *IConn_SendBatch_Call) Return(_a0 gpgx.IBatchResults, _a1 error) *IConn_SendBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IConn_SendBatch_Call) RunAndReturn(run func(context.Context, gpgx.IBatch) (gpgx.IBatchResults, error)) *IConn_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewIConn creates a new instance of IConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConn {
	mock := &IConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
