// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gpgx "github.com/dock-tech/isis-golang-lib/database/gpgx"
	mock "github.com/stretchr/testify/mock"
)

// IPool is an autogenerated mock type for the IPool type
type IPool struct {
	mock.Mock
}

type IPool_Expecter struct {
	mock *mock.Mock
}

func (_m *IPool) EXPECT() *IPool_Expecter {
	return &IPool_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: ctx
func (_m *IPool) Acquire(ctx context.Context) (gpgx.IConn, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 gpgx.IConn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (gpgx.IConn, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) gpgx.IConn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.IConn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPool_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type IPool_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IPool_Expecter) Acquire(ctx interface{}) *IPool_Acquire_Call {
	return &IPool_Acquire_Call{Call: _e.mock.On("Acquire", ctx)}
}

func (_c *IPool_Acquire_Call) Run(run func(ctx context.Context)) *IPool_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IPool_Acquire_Call) Return(_a0 gpgx.IConn, _a1 error) *IPool_Acquire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPool_Acquire_Call) RunAndReturn(run func(context.Context) (gpgx.IConn, error)) *IPool_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *IPool) Close() {
	_m.Called()
}

// IPool_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IPool_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IPool_Expecter) Close() *IPool_Close_Call {
	return &IPool_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IPool_Close_Call) Run(run func()) *IPool_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IPool_Close_Call) Return() *IPool_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *IPool_Close_Call) RunAndReturn(run func()) *IPool_Close_Call {
	_c.Run(run)
	return _c
}

// GetConnWithNotPresent provides a mock function with given fields: ctx, conn
func (_m *IPool) GetConnWithNotPresent(ctx context.Context, conn gpgx.IConn) (gpgx.IConn, func(), error) {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for GetConnWithNotPresent")
	}

	var r0 gpgx.IConn
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, gpgx.IConn) (gpgx.IConn, func(), error)); ok {
		return rf(ctx, conn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gpgx.IConn) gpgx.IConn); ok {
		r0 = rf(ctx, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gpgx.IConn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gpgx.IConn) func()); ok {
		r1 = rf(ctx, conn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, gpgx.IConn) error); ok {
		r2 = rf(ctx, conn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IPool_GetConnWithNotPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnWithNotPresent'
type IPool_GetConnWithNotPresent_Call struct {
	*mock.Call
}

// GetConnWithNotPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - conn gpgx.IConn
func (_e *IPool_Expecter) GetConnWithNotPresent(ctx interface{}, conn interface{}) *IPool_GetConnWithNotPresent_Call {
	return &IPool_GetConnWithNotPresent_Call{Call: _e.mock.On("GetConnWithNotPresent", ctx, conn)}
}

func (_c *IPool_GetConnWithNotPresent_Call) Run(run func(ctx context.Context, conn gpgx.IConn)) *IPool_GetConnWithNotPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gpgx.IConn))
	})
	return _c
}

func (_c *IPool_GetConnWithNotPresent_Call) Return(_a0 gpgx.IConn, _a1 func(), _a2 error) *IPool_GetConnWithNotPresent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IPool_GetConnWithNotPresent_Call) RunAndReturn(run func(context.Context, gpgx.IConn) (gpgx.IConn, func(), error)) *IPool_GetConnWithNotPresent_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *IPool) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPool_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type IPool_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IPool_Expecter) Ping(ctx interface{}) *IPool_Ping_Call {
	return &IPool_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *IPool_Ping_Call) Run(run func(ctx context.Context)) *IPool_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IPool_Ping_Call) Return(_a0 error) *IPool_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPool_Ping_Call) RunAndReturn(run func(context.Context) error) *IPool_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPool creates a new instance of IPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPool {
	mock := &IPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
