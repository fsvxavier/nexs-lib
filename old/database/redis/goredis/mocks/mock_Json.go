// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/dock-tech/isis-golang-lib/database/redis/goredis"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJson creates a new instance of MockJson. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJson(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJson {
	mock := &MockJson{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJson is an autogenerated mock type for the Json type
type MockJson struct {
	mock.Mock
}

type MockJson_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJson) EXPECT() *MockJson_Expecter {
	return &MockJson_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type MockJson
func (_mock *MockJson) Del(ctx context.Context, keys ...string) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) (interface{}, error)); ok {
		return returnFunc(ctx, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) interface{}); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = returnFunc(ctx, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockJson_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockJson_Expecter) Del(ctx interface{}, keys ...interface{}) *MockJson_Del_Call {
	return &MockJson_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockJson_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockJson_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockJson_Del_Call) Return(res interface{}, err error) *MockJson_Del_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockJson_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) (interface{}, error)) *MockJson_Del_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireDate provides a mock function for the type MockJson
func (_mock *MockJson) ExpireDate(ctx context.Context, key string, expireDate time.Time) (interface{}, error) {
	ret := _mock.Called(ctx, key, expireDate)

	if len(ret) == 0 {
		panic("no return value specified for ExpireDate")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) (interface{}, error)); ok {
		return returnFunc(ctx, key, expireDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) interface{}); ok {
		r0 = returnFunc(ctx, key, expireDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = returnFunc(ctx, key, expireDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_ExpireDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireDate'
type MockJson_ExpireDate_Call struct {
	*mock.Call
}

// ExpireDate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expireDate time.Time
func (_e *MockJson_Expecter) ExpireDate(ctx interface{}, key interface{}, expireDate interface{}) *MockJson_ExpireDate_Call {
	return &MockJson_ExpireDate_Call{Call: _e.mock.On("ExpireDate", ctx, key, expireDate)}
}

func (_c *MockJson_ExpireDate_Call) Run(run func(ctx context.Context, key string, expireDate time.Time)) *MockJson_ExpireDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_ExpireDate_Call) Return(ifaceVal interface{}, err error) *MockJson_ExpireDate_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_ExpireDate_Call) RunAndReturn(run func(ctx context.Context, key string, expireDate time.Time) (interface{}, error)) *MockJson_ExpireDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetJSON provides a mock function for the type MockJson
func (_mock *MockJson) GetJSON(ctx context.Context, key string, v interface{}) error {
	ret := _mock.Called(ctx, key, v)

	if len(ret) == 0 {
		panic("no return value specified for GetJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = returnFunc(ctx, key, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJson_GetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSON'
type MockJson_GetJSON_Call struct {
	*mock.Call
}

// GetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - v interface{}
func (_e *MockJson_Expecter) GetJSON(ctx interface{}, key interface{}, v interface{}) *MockJson_GetJSON_Call {
	return &MockJson_GetJSON_Call{Call: _e.mock.On("GetJSON", ctx, key, v)}
}

func (_c *MockJson_GetJSON_Call) Run(run func(ctx context.Context, key string, v interface{})) *MockJson_GetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_GetJSON_Call) Return(err error) *MockJson_GetJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJson_GetJSON_Call) RunAndReturn(run func(ctx context.Context, key string, v interface{}) error) *MockJson_GetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrAppend provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(values) > 0 {
		tmpRet = _mock.Called(ctx, key, path, values)
	} else {
		tmpRet = _mock.Called(ctx, key, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrAppend")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, values...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, values...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrAppend'
type MockJson_JSONArrAppend_Call struct {
	*mock.Call
}

// JSONArrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - values ...interface{}
func (_e *MockJson_Expecter) JSONArrAppend(ctx interface{}, key interface{}, path interface{}, values ...interface{}) *MockJson_JSONArrAppend_Call {
	return &MockJson_JSONArrAppend_Call{Call: _e.mock.On("JSONArrAppend",
		append([]interface{}{ctx, key, path}, values...)...)}
}

func (_c *MockJson_JSONArrAppend_Call) Run(run func(ctx context.Context, key string, path string, values ...interface{})) *MockJson_JSONArrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrAppend_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrAppend_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrAppend_Call) RunAndReturn(run func(ctx context.Context, key string, path string, values ...interface{}) (interface{}, error)) *MockJson_JSONArrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndex provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrIndex(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(optionalRange) > 0 {
		tmpRet = _mock.Called(ctx, key, path, jsonValue, optionalRange)
	} else {
		tmpRet = _mock.Called(ctx, key, path, jsonValue)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndex")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, jsonValue, optionalRange...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, jsonValue, optionalRange...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...int) error); ok {
		r1 = returnFunc(ctx, key, path, jsonValue, optionalRange...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndex'
type MockJson_JSONArrIndex_Call struct {
	*mock.Call
}

// JSONArrIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - jsonValue interface{}
//   - optionalRange ...int
func (_e *MockJson_Expecter) JSONArrIndex(ctx interface{}, key interface{}, path interface{}, jsonValue interface{}, optionalRange ...interface{}) *MockJson_JSONArrIndex_Call {
	return &MockJson_JSONArrIndex_Call{Call: _e.mock.On("JSONArrIndex",
		append([]interface{}{ctx, key, path, jsonValue}, optionalRange...)...)}
}

func (_c *MockJson_JSONArrIndex_Call) Run(run func(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int)) *MockJson_JSONArrIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		var arg4 []int
		var variadicArgs []int
		if len(args) > 4 {
			variadicArgs = args[4].([]int)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrIndex_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrIndex_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrIndex_Call) RunAndReturn(run func(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int) (interface{}, error)) *MockJson_JSONArrIndex_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrInsert provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrInsert(ctx context.Context, key string, path string, index int, values ...interface{}) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(values) > 0 {
		tmpRet = _mock.Called(ctx, key, path, index, values)
	} else {
		tmpRet = _mock.Called(ctx, key, path, index)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrInsert")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, ...interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, index, values...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, ...interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, index, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, ...interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, index, values...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrInsert'
type MockJson_JSONArrInsert_Call struct {
	*mock.Call
}

// JSONArrInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
//   - values ...interface{}
func (_e *MockJson_Expecter) JSONArrInsert(ctx interface{}, key interface{}, path interface{}, index interface{}, values ...interface{}) *MockJson_JSONArrInsert_Call {
	return &MockJson_JSONArrInsert_Call{Call: _e.mock.On("JSONArrInsert",
		append([]interface{}{ctx, key, path, index}, values...)...)}
}

func (_c *MockJson_JSONArrInsert_Call) Run(run func(ctx context.Context, key string, path string, index int, values ...interface{})) *MockJson_JSONArrInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 []interface{}
		var variadicArgs []interface{}
		if len(args) > 4 {
			variadicArgs = args[4].([]interface{})
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrInsert_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrInsert_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrInsert_Call) RunAndReturn(run func(ctx context.Context, key string, path string, index int, values ...interface{}) (interface{}, error)) *MockJson_JSONArrInsert_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrLen provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrLen'
type MockJson_JSONArrLen_Call struct {
	*mock.Call
}

// JSONArrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONArrLen(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONArrLen_Call {
	return &MockJson_JSONArrLen_Call{Call: _e.mock.On("JSONArrLen", ctx, key, path)}
}

func (_c *MockJson_JSONArrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONArrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrLen_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONArrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrPop provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrPop(ctx context.Context, key string, path string, index int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, index)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrPop")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, index)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrPop'
type MockJson_JSONArrPop_Call struct {
	*mock.Call
}

// JSONArrPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
func (_e *MockJson_Expecter) JSONArrPop(ctx interface{}, key interface{}, path interface{}, index interface{}) *MockJson_JSONArrPop_Call {
	return &MockJson_JSONArrPop_Call{Call: _e.mock.On("JSONArrPop", ctx, key, path, index)}
}

func (_c *MockJson_JSONArrPop_Call) Run(run func(ctx context.Context, key string, path string, index int)) *MockJson_JSONArrPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrPop_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrPop_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrPop_Call) RunAndReturn(run func(ctx context.Context, key string, path string, index int) (interface{}, error)) *MockJson_JSONArrPop_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrim provides a mock function for the type MockJson
func (_mock *MockJson) JSONArrTrim(ctx context.Context, key string, path string, start int, end int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, start, end)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrim")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = returnFunc(ctx, key, path, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONArrTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrim'
type MockJson_JSONArrTrim_Call struct {
	*mock.Call
}

// JSONArrTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - start int
//   - end int
func (_e *MockJson_Expecter) JSONArrTrim(ctx interface{}, key interface{}, path interface{}, start interface{}, end interface{}) *MockJson_JSONArrTrim_Call {
	return &MockJson_JSONArrTrim_Call{Call: _e.mock.On("JSONArrTrim", ctx, key, path, start, end)}
}

func (_c *MockJson_JSONArrTrim_Call) Run(run func(ctx context.Context, key string, path string, start int, end int)) *MockJson_JSONArrTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockJson_JSONArrTrim_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONArrTrim_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONArrTrim_Call) RunAndReturn(run func(ctx context.Context, key string, path string, start int, end int) (interface{}, error)) *MockJson_JSONArrTrim_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDebug provides a mock function for the type MockJson
func (_mock *MockJson) JSONDebug(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, subCmd, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDebug")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, goredis.DebugSubCommand, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, subCmd, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, goredis.DebugSubCommand, string, string) interface{}); ok {
		r0 = returnFunc(ctx, subCmd, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, goredis.DebugSubCommand, string, string) error); ok {
		r1 = returnFunc(ctx, subCmd, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDebug'
type MockJson_JSONDebug_Call struct {
	*mock.Call
}

// JSONDebug is a helper method to define mock.On call
//   - ctx context.Context
//   - subCmd goredis.DebugSubCommand
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONDebug(ctx interface{}, subCmd interface{}, key interface{}, path interface{}) *MockJson_JSONDebug_Call {
	return &MockJson_JSONDebug_Call{Call: _e.mock.On("JSONDebug", ctx, subCmd, key, path)}
}

func (_c *MockJson_JSONDebug_Call) Run(run func(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string)) *MockJson_JSONDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 goredis.DebugSubCommand
		if args[1] != nil {
			arg1 = args[1].(goredis.DebugSubCommand)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONDebug_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONDebug_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONDebug_Call) RunAndReturn(run func(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string) (interface{}, error)) *MockJson_JSONDebug_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDel provides a mock function for the type MockJson
func (_mock *MockJson) JSONDel(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDel")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDel'
type MockJson_JSONDel_Call struct {
	*mock.Call
}

// JSONDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONDel(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONDel_Call {
	return &MockJson_JSONDel_Call{Call: _e.mock.On("JSONDel", ctx, key, path)}
}

func (_c *MockJson_JSONDel_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONDel_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONDel_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONDel_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONDel_Call {
	_c.Call.Return(run)
	return _c
}

// JSONForget provides a mock function for the type MockJson
func (_mock *MockJson) JSONForget(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONForget")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONForget'
type MockJson_JSONForget_Call struct {
	*mock.Call
}

// JSONForget is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONForget(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONForget_Call {
	return &MockJson_JSONForget_Call{Call: _e.mock.On("JSONForget", ctx, key, path)}
}

func (_c *MockJson_JSONForget_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONForget_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONForget_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONForget_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONForget_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGet provides a mock function for the type MockJson
func (_mock *MockJson) JSONGet(ctx context.Context, key string, path string, opts ...goredis.GetOption) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, key, path, opts)
	} else {
		tmpRet = _mock.Called(ctx, key, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONGet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...goredis.GetOption) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...goredis.GetOption) interface{}); ok {
		r0 = returnFunc(ctx, key, path, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...goredis.GetOption) error); ok {
		r1 = returnFunc(ctx, key, path, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGet'
type MockJson_JSONGet_Call struct {
	*mock.Call
}

// JSONGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - opts ...goredis.GetOption
func (_e *MockJson_Expecter) JSONGet(ctx interface{}, key interface{}, path interface{}, opts ...interface{}) *MockJson_JSONGet_Call {
	return &MockJson_JSONGet_Call{Call: _e.mock.On("JSONGet",
		append([]interface{}{ctx, key, path}, opts...)...)}
}

func (_c *MockJson_JSONGet_Call) Run(run func(ctx context.Context, key string, path string, opts ...goredis.GetOption)) *MockJson_JSONGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []goredis.GetOption
		var variadicArgs []goredis.GetOption
		if len(args) > 3 {
			variadicArgs = args[3].([]goredis.GetOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockJson_JSONGet_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONGet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONGet_Call) RunAndReturn(run func(ctx context.Context, key string, path string, opts ...goredis.GetOption) (interface{}, error)) *MockJson_JSONGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONIncrBy provides a mock function for the type MockJson
func (_mock *MockJson) JSONIncrBy(ctx context.Context, key string, path string, number interface{}) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONIncrBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONIncrBy'
type MockJson_JSONIncrBy_Call struct {
	*mock.Call
}

// JSONIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number interface{}
func (_e *MockJson_Expecter) JSONIncrBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJson_JSONIncrBy_Call {
	return &MockJson_JSONIncrBy_Call{Call: _e.mock.On("JSONIncrBy", ctx, key, path, number)}
}

func (_c *MockJson_JSONIncrBy_Call) Run(run func(ctx context.Context, key string, path string, number interface{})) *MockJson_JSONIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONIncrBy_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONIncrBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONIncrBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number interface{}) (interface{}, error)) *MockJson_JSONIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMGet provides a mock function for the type MockJson
func (_mock *MockJson) JSONMGet(ctx context.Context, path string, keys ...string) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, path, keys)
	} else {
		tmpRet = _mock.Called(ctx, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONMGet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) (interface{}, error)); ok {
		return returnFunc(ctx, path, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) interface{}); ok {
		r0 = returnFunc(ctx, path, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = returnFunc(ctx, path, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMGet'
type MockJson_JSONMGet_Call struct {
	*mock.Call
}

// JSONMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - keys ...string
func (_e *MockJson_Expecter) JSONMGet(ctx interface{}, path interface{}, keys ...interface{}) *MockJson_JSONMGet_Call {
	return &MockJson_JSONMGet_Call{Call: _e.mock.On("JSONMGet",
		append([]interface{}{ctx, path}, keys...)...)}
}

func (_c *MockJson_JSONMGet_Call) Run(run func(ctx context.Context, path string, keys ...string)) *MockJson_JSONMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJson_JSONMGet_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONMGet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONMGet_Call) RunAndReturn(run func(ctx context.Context, path string, keys ...string) (interface{}, error)) *MockJson_JSONMGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONNumIncrBy provides a mock function for the type MockJson
func (_mock *MockJson) JSONNumIncrBy(ctx context.Context, key string, path string, number int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumIncrBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONNumIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumIncrBy'
type MockJson_JSONNumIncrBy_Call struct {
	*mock.Call
}

// JSONNumIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number int
func (_e *MockJson_Expecter) JSONNumIncrBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJson_JSONNumIncrBy_Call {
	return &MockJson_JSONNumIncrBy_Call{Call: _e.mock.On("JSONNumIncrBy", ctx, key, path, number)}
}

func (_c *MockJson_JSONNumIncrBy_Call) Run(run func(ctx context.Context, key string, path string, number int)) *MockJson_JSONNumIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONNumIncrBy_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONNumIncrBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONNumIncrBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number int) (interface{}, error)) *MockJson_JSONNumIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONNumMultBy provides a mock function for the type MockJson
func (_mock *MockJson) JSONNumMultBy(ctx context.Context, key string, path string, number int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumMultBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONNumMultBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumMultBy'
type MockJson_JSONNumMultBy_Call struct {
	*mock.Call
}

// JSONNumMultBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number int
func (_e *MockJson_Expecter) JSONNumMultBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJson_JSONNumMultBy_Call {
	return &MockJson_JSONNumMultBy_Call{Call: _e.mock.On("JSONNumMultBy", ctx, key, path, number)}
}

func (_c *MockJson_JSONNumMultBy_Call) Run(run func(ctx context.Context, key string, path string, number int)) *MockJson_JSONNumMultBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONNumMultBy_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONNumMultBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONNumMultBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number int) (interface{}, error)) *MockJson_JSONNumMultBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjKeys provides a mock function for the type MockJson
func (_mock *MockJson) JSONObjKeys(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjKeys")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONObjKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjKeys'
type MockJson_JSONObjKeys_Call struct {
	*mock.Call
}

// JSONObjKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONObjKeys(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONObjKeys_Call {
	return &MockJson_JSONObjKeys_Call{Call: _e.mock.On("JSONObjKeys", ctx, key, path)}
}

func (_c *MockJson_JSONObjKeys_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONObjKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONObjKeys_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONObjKeys_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONObjKeys_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONObjKeys_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjLen provides a mock function for the type MockJson
func (_mock *MockJson) JSONObjLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONObjLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjLen'
type MockJson_JSONObjLen_Call struct {
	*mock.Call
}

// JSONObjLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONObjLen(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONObjLen_Call {
	return &MockJson_JSONObjLen_Call{Call: _e.mock.On("JSONObjLen", ctx, key, path)}
}

func (_c *MockJson_JSONObjLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONObjLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONObjLen_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONObjLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONObjLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONObjLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONResp provides a mock function for the type MockJson
func (_mock *MockJson) JSONResp(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONResp")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONResp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONResp'
type MockJson_JSONResp_Call struct {
	*mock.Call
}

// JSONResp is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONResp(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONResp_Call {
	return &MockJson_JSONResp_Call{Call: _e.mock.On("JSONResp", ctx, key, path)}
}

func (_c *MockJson_JSONResp_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONResp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONResp_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONResp_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONResp_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONResp_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSet provides a mock function for the type MockJson
func (_mock *MockJson) JSONSet(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, key, path, obj, opts)
	} else {
		tmpRet = _mock.Called(ctx, key, path, obj)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONSet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...goredis.SetOption) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, obj, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...goredis.SetOption) interface{}); ok {
		r0 = returnFunc(ctx, key, path, obj, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...goredis.SetOption) error); ok {
		r1 = returnFunc(ctx, key, path, obj, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSet'
type MockJson_JSONSet_Call struct {
	*mock.Call
}

// JSONSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - obj interface{}
//   - opts ...goredis.SetOption
func (_e *MockJson_Expecter) JSONSet(ctx interface{}, key interface{}, path interface{}, obj interface{}, opts ...interface{}) *MockJson_JSONSet_Call {
	return &MockJson_JSONSet_Call{Call: _e.mock.On("JSONSet",
		append([]interface{}{ctx, key, path, obj}, opts...)...)}
}

func (_c *MockJson_JSONSet_Call) Run(run func(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption)) *MockJson_JSONSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		var arg4 []goredis.SetOption
		var variadicArgs []goredis.SetOption
		if len(args) > 4 {
			variadicArgs = args[4].([]goredis.SetOption)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJson_JSONSet_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONSet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONSet_Call) RunAndReturn(run func(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption) (interface{}, error)) *MockJson_JSONSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrAppend provides a mock function for the type MockJson
func (_mock *MockJson) JSONStrAppend(ctx context.Context, key string, path string, jsonstring string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, jsonstring)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrAppend")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, jsonstring)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path, jsonstring)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, key, path, jsonstring)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONStrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrAppend'
type MockJson_JSONStrAppend_Call struct {
	*mock.Call
}

// JSONStrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - jsonstring string
func (_e *MockJson_Expecter) JSONStrAppend(ctx interface{}, key interface{}, path interface{}, jsonstring interface{}) *MockJson_JSONStrAppend_Call {
	return &MockJson_JSONStrAppend_Call{Call: _e.mock.On("JSONStrAppend", ctx, key, path, jsonstring)}
}

func (_c *MockJson_JSONStrAppend_Call) Run(run func(ctx context.Context, key string, path string, jsonstring string)) *MockJson_JSONStrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJson_JSONStrAppend_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONStrAppend_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONStrAppend_Call) RunAndReturn(run func(ctx context.Context, key string, path string, jsonstring string) (interface{}, error)) *MockJson_JSONStrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrLen provides a mock function for the type MockJson
func (_mock *MockJson) JSONStrLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONStrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrLen'
type MockJson_JSONStrLen_Call struct {
	*mock.Call
}

// JSONStrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONStrLen(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONStrLen_Call {
	return &MockJson_JSONStrLen_Call{Call: _e.mock.On("JSONStrLen", ctx, key, path)}
}

func (_c *MockJson_JSONStrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONStrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONStrLen_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONStrLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONStrLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONStrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONType provides a mock function for the type MockJson
func (_mock *MockJson) JSONType(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONType")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_JSONType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONType'
type MockJson_JSONType_Call struct {
	*mock.Call
}

// JSONType is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJson_Expecter) JSONType(ctx interface{}, key interface{}, path interface{}) *MockJson_JSONType_Call {
	return &MockJson_JSONType_Call{Call: _e.mock.On("JSONType", ctx, key, path)}
}

func (_c *MockJson_JSONType_Call) Run(run func(ctx context.Context, key string, path string)) *MockJson_JSONType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJson_JSONType_Call) Return(ifaceVal interface{}, err error) *MockJson_JSONType_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJson_JSONType_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJson_JSONType_Call {
	_c.Call.Return(run)
	return _c
}

// MGetJSON provides a mock function for the type MockJson
func (_mock *MockJson) MGetJSON(ctx context.Context, v interface{}, keys ...string) error {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, v, keys)
	} else {
		tmpRet = _mock.Called(ctx, v)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for MGetJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...string) error); ok {
		r0 = returnFunc(ctx, v, keys...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJson_MGetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGetJSON'
type MockJson_MGetJSON_Call struct {
	*mock.Call
}

// MGetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
//   - keys ...string
func (_e *MockJson_Expecter) MGetJSON(ctx interface{}, v interface{}, keys ...interface{}) *MockJson_MGetJSON_Call {
	return &MockJson_MGetJSON_Call{Call: _e.mock.On("MGetJSON",
		append([]interface{}{ctx, v}, keys...)...)}
}

func (_c *MockJson_MGetJSON_Call) Run(run func(ctx context.Context, v interface{}, keys ...string)) *MockJson_MGetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJson_MGetJSON_Call) Return(err error) *MockJson_MGetJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJson_MGetJSON_Call) RunAndReturn(run func(ctx context.Context, v interface{}, keys ...string) error) *MockJson_MGetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// MSetJSON provides a mock function for the type MockJson
func (_mock *MockJson) MSetJSON(ctx context.Context, params ...goredis.MSetParam) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(params) > 0 {
		tmpRet = _mock.Called(ctx, params)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for MSetJSON")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...goredis.MSetParam) (interface{}, error)); ok {
		return returnFunc(ctx, params...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...goredis.MSetParam) interface{}); ok {
		r0 = returnFunc(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...goredis.MSetParam) error); ok {
		r1 = returnFunc(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJson_MSetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSetJSON'
type MockJson_MSetJSON_Call struct {
	*mock.Call
}

// MSetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...goredis.MSetParam
func (_e *MockJson_Expecter) MSetJSON(ctx interface{}, params ...interface{}) *MockJson_MSetJSON_Call {
	return &MockJson_MSetJSON_Call{Call: _e.mock.On("MSetJSON",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *MockJson_MSetJSON_Call) Run(run func(ctx context.Context, params ...goredis.MSetParam)) *MockJson_MSetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []goredis.MSetParam
		var variadicArgs []goredis.MSetParam
		if len(args) > 1 {
			variadicArgs = args[1].([]goredis.MSetParam)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockJson_MSetJSON_Call) Return(res interface{}, err error) *MockJson_MSetJSON_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockJson_MSetJSON_Call) RunAndReturn(run func(ctx context.Context, params ...goredis.MSetParam) (interface{}, error)) *MockJson_MSetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockJson
func (_mock *MockJson) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJson_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockJson_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJson_Expecter) Ping(ctx interface{}) *MockJson_Ping_Call {
	return &MockJson_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockJson_Ping_Call) Run(run func(ctx context.Context)) *MockJson_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJson_Ping_Call) Return(err error) *MockJson_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJson_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockJson_Ping_Call {
	_c.Call.Return(run)
	return _c
}
