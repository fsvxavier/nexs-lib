// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJsonArray creates a new instance of MockJsonArray. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJsonArray(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJsonArray {
	mock := &MockJsonArray{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJsonArray is an autogenerated mock type for the JsonArray type
type MockJsonArray struct {
	mock.Mock
}

type MockJsonArray_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJsonArray) EXPECT() *MockJsonArray_Expecter {
	return &MockJsonArray_Expecter{mock: &_m.Mock}
}

// JSONArrAppend provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(values) > 0 {
		tmpRet = _mock.Called(ctx, key, path, values)
	} else {
		tmpRet = _mock.Called(ctx, key, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrAppend")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, values...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, values...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrAppend'
type MockJsonArray_JSONArrAppend_Call struct {
	*mock.Call
}

// JSONArrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - values ...interface{}
func (_e *MockJsonArray_Expecter) JSONArrAppend(ctx interface{}, key interface{}, path interface{}, values ...interface{}) *MockJsonArray_JSONArrAppend_Call {
	return &MockJsonArray_JSONArrAppend_Call{Call: _e.mock.On("JSONArrAppend",
		append([]interface{}{ctx, key, path}, values...)...)}
}

func (_c *MockJsonArray_JSONArrAppend_Call) Run(run func(ctx context.Context, key string, path string, values ...interface{})) *MockJsonArray_JSONArrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrAppend_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrAppend_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrAppend_Call) RunAndReturn(run func(ctx context.Context, key string, path string, values ...interface{}) (interface{}, error)) *MockJsonArray_JSONArrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndex provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrIndex(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(optionalRange) > 0 {
		tmpRet = _mock.Called(ctx, key, path, jsonValue, optionalRange)
	} else {
		tmpRet = _mock.Called(ctx, key, path, jsonValue)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndex")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, jsonValue, optionalRange...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, jsonValue, optionalRange...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...int) error); ok {
		r1 = returnFunc(ctx, key, path, jsonValue, optionalRange...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndex'
type MockJsonArray_JSONArrIndex_Call struct {
	*mock.Call
}

// JSONArrIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - jsonValue interface{}
//   - optionalRange ...int
func (_e *MockJsonArray_Expecter) JSONArrIndex(ctx interface{}, key interface{}, path interface{}, jsonValue interface{}, optionalRange ...interface{}) *MockJsonArray_JSONArrIndex_Call {
	return &MockJsonArray_JSONArrIndex_Call{Call: _e.mock.On("JSONArrIndex",
		append([]interface{}{ctx, key, path, jsonValue}, optionalRange...)...)}
}

func (_c *MockJsonArray_JSONArrIndex_Call) Run(run func(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int)) *MockJsonArray_JSONArrIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		var arg4 []int
		var variadicArgs []int
		if len(args) > 4 {
			variadicArgs = args[4].([]int)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrIndex_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrIndex_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrIndex_Call) RunAndReturn(run func(ctx context.Context, key string, path string, jsonValue interface{}, optionalRange ...int) (interface{}, error)) *MockJsonArray_JSONArrIndex_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrInsert provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrInsert(ctx context.Context, key string, path string, index int, values ...interface{}) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(values) > 0 {
		tmpRet = _mock.Called(ctx, key, path, index, values)
	} else {
		tmpRet = _mock.Called(ctx, key, path, index)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONArrInsert")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, ...interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, index, values...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, ...interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, index, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, ...interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, index, values...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrInsert'
type MockJsonArray_JSONArrInsert_Call struct {
	*mock.Call
}

// JSONArrInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
//   - values ...interface{}
func (_e *MockJsonArray_Expecter) JSONArrInsert(ctx interface{}, key interface{}, path interface{}, index interface{}, values ...interface{}) *MockJsonArray_JSONArrInsert_Call {
	return &MockJsonArray_JSONArrInsert_Call{Call: _e.mock.On("JSONArrInsert",
		append([]interface{}{ctx, key, path, index}, values...)...)}
}

func (_c *MockJsonArray_JSONArrInsert_Call) Run(run func(ctx context.Context, key string, path string, index int, values ...interface{})) *MockJsonArray_JSONArrInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 []interface{}
		var variadicArgs []interface{}
		if len(args) > 4 {
			variadicArgs = args[4].([]interface{})
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrInsert_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrInsert_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrInsert_Call) RunAndReturn(run func(ctx context.Context, key string, path string, index int, values ...interface{}) (interface{}, error)) *MockJsonArray_JSONArrInsert_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrLen provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrLen'
type MockJsonArray_JSONArrLen_Call struct {
	*mock.Call
}

// JSONArrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonArray_Expecter) JSONArrLen(ctx interface{}, key interface{}, path interface{}) *MockJsonArray_JSONArrLen_Call {
	return &MockJsonArray_JSONArrLen_Call{Call: _e.mock.On("JSONArrLen", ctx, key, path)}
}

func (_c *MockJsonArray_JSONArrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonArray_JSONArrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrLen_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonArray_JSONArrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrPop provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrPop(ctx context.Context, key string, path string, index int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, index)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrPop")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, index)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrPop'
type MockJsonArray_JSONArrPop_Call struct {
	*mock.Call
}

// JSONArrPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
func (_e *MockJsonArray_Expecter) JSONArrPop(ctx interface{}, key interface{}, path interface{}, index interface{}) *MockJsonArray_JSONArrPop_Call {
	return &MockJsonArray_JSONArrPop_Call{Call: _e.mock.On("JSONArrPop", ctx, key, path, index)}
}

func (_c *MockJsonArray_JSONArrPop_Call) Run(run func(ctx context.Context, key string, path string, index int)) *MockJsonArray_JSONArrPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrPop_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrPop_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrPop_Call) RunAndReturn(run func(ctx context.Context, key string, path string, index int) (interface{}, error)) *MockJsonArray_JSONArrPop_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrim provides a mock function for the type MockJsonArray
func (_mock *MockJsonArray) JSONArrTrim(ctx context.Context, key string, path string, start int, end int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, start, end)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrim")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = returnFunc(ctx, key, path, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonArray_JSONArrTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrim'
type MockJsonArray_JSONArrTrim_Call struct {
	*mock.Call
}

// JSONArrTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - start int
//   - end int
func (_e *MockJsonArray_Expecter) JSONArrTrim(ctx interface{}, key interface{}, path interface{}, start interface{}, end interface{}) *MockJsonArray_JSONArrTrim_Call {
	return &MockJsonArray_JSONArrTrim_Call{Call: _e.mock.On("JSONArrTrim", ctx, key, path, start, end)}
}

func (_c *MockJsonArray_JSONArrTrim_Call) Run(run func(ctx context.Context, key string, path string, start int, end int)) *MockJsonArray_JSONArrTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockJsonArray_JSONArrTrim_Call) Return(ifaceVal interface{}, err error) *MockJsonArray_JSONArrTrim_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonArray_JSONArrTrim_Call) RunAndReturn(run func(ctx context.Context, key string, path string, start int, end int) (interface{}, error)) *MockJsonArray_JSONArrTrim_Call {
	_c.Call.Return(run)
	return _c
}
