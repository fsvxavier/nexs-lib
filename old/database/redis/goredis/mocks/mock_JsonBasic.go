// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/dock-tech/isis-golang-lib/database/redis/goredis"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJsonBasic creates a new instance of MockJsonBasic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJsonBasic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJsonBasic {
	mock := &MockJsonBasic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJsonBasic is an autogenerated mock type for the JsonBasic type
type MockJsonBasic struct {
	mock.Mock
}

type MockJsonBasic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJsonBasic) EXPECT() *MockJsonBasic_Expecter {
	return &MockJsonBasic_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) Del(ctx context.Context, keys ...string) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) (interface{}, error)); ok {
		return returnFunc(ctx, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) interface{}); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = returnFunc(ctx, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockJsonBasic_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockJsonBasic_Expecter) Del(ctx interface{}, keys ...interface{}) *MockJsonBasic_Del_Call {
	return &MockJsonBasic_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockJsonBasic_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockJsonBasic_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_Del_Call) Return(res interface{}, err error) *MockJsonBasic_Del_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockJsonBasic_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) (interface{}, error)) *MockJsonBasic_Del_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireDate provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) ExpireDate(ctx context.Context, key string, expireDate time.Time) (interface{}, error) {
	ret := _mock.Called(ctx, key, expireDate)

	if len(ret) == 0 {
		panic("no return value specified for ExpireDate")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) (interface{}, error)); ok {
		return returnFunc(ctx, key, expireDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) interface{}); ok {
		r0 = returnFunc(ctx, key, expireDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = returnFunc(ctx, key, expireDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_ExpireDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireDate'
type MockJsonBasic_ExpireDate_Call struct {
	*mock.Call
}

// ExpireDate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expireDate time.Time
func (_e *MockJsonBasic_Expecter) ExpireDate(ctx interface{}, key interface{}, expireDate interface{}) *MockJsonBasic_ExpireDate_Call {
	return &MockJsonBasic_ExpireDate_Call{Call: _e.mock.On("ExpireDate", ctx, key, expireDate)}
}

func (_c *MockJsonBasic_ExpireDate_Call) Run(run func(ctx context.Context, key string, expireDate time.Time)) *MockJsonBasic_ExpireDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_ExpireDate_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_ExpireDate_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_ExpireDate_Call) RunAndReturn(run func(ctx context.Context, key string, expireDate time.Time) (interface{}, error)) *MockJsonBasic_ExpireDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetJSON provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) GetJSON(ctx context.Context, key string, v interface{}) error {
	ret := _mock.Called(ctx, key, v)

	if len(ret) == 0 {
		panic("no return value specified for GetJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = returnFunc(ctx, key, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJsonBasic_GetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSON'
type MockJsonBasic_GetJSON_Call struct {
	*mock.Call
}

// GetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - v interface{}
func (_e *MockJsonBasic_Expecter) GetJSON(ctx interface{}, key interface{}, v interface{}) *MockJsonBasic_GetJSON_Call {
	return &MockJsonBasic_GetJSON_Call{Call: _e.mock.On("GetJSON", ctx, key, v)}
}

func (_c *MockJsonBasic_GetJSON_Call) Run(run func(ctx context.Context, key string, v interface{})) *MockJsonBasic_GetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_GetJSON_Call) Return(err error) *MockJsonBasic_GetJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJsonBasic_GetJSON_Call) RunAndReturn(run func(ctx context.Context, key string, v interface{}) error) *MockJsonBasic_GetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDebug provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONDebug(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, subCmd, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDebug")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, goredis.DebugSubCommand, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, subCmd, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, goredis.DebugSubCommand, string, string) interface{}); ok {
		r0 = returnFunc(ctx, subCmd, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, goredis.DebugSubCommand, string, string) error); ok {
		r1 = returnFunc(ctx, subCmd, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDebug'
type MockJsonBasic_JSONDebug_Call struct {
	*mock.Call
}

// JSONDebug is a helper method to define mock.On call
//   - ctx context.Context
//   - subCmd goredis.DebugSubCommand
//   - key string
//   - path string
func (_e *MockJsonBasic_Expecter) JSONDebug(ctx interface{}, subCmd interface{}, key interface{}, path interface{}) *MockJsonBasic_JSONDebug_Call {
	return &MockJsonBasic_JSONDebug_Call{Call: _e.mock.On("JSONDebug", ctx, subCmd, key, path)}
}

func (_c *MockJsonBasic_JSONDebug_Call) Run(run func(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string)) *MockJsonBasic_JSONDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 goredis.DebugSubCommand
		if args[1] != nil {
			arg1 = args[1].(goredis.DebugSubCommand)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONDebug_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONDebug_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONDebug_Call) RunAndReturn(run func(ctx context.Context, subCmd goredis.DebugSubCommand, key string, path string) (interface{}, error)) *MockJsonBasic_JSONDebug_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDel provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONDel(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDel")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDel'
type MockJsonBasic_JSONDel_Call struct {
	*mock.Call
}

// JSONDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonBasic_Expecter) JSONDel(ctx interface{}, key interface{}, path interface{}) *MockJsonBasic_JSONDel_Call {
	return &MockJsonBasic_JSONDel_Call{Call: _e.mock.On("JSONDel", ctx, key, path)}
}

func (_c *MockJsonBasic_JSONDel_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonBasic_JSONDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONDel_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONDel_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONDel_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonBasic_JSONDel_Call {
	_c.Call.Return(run)
	return _c
}

// JSONForget provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONForget(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONForget")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONForget'
type MockJsonBasic_JSONForget_Call struct {
	*mock.Call
}

// JSONForget is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonBasic_Expecter) JSONForget(ctx interface{}, key interface{}, path interface{}) *MockJsonBasic_JSONForget_Call {
	return &MockJsonBasic_JSONForget_Call{Call: _e.mock.On("JSONForget", ctx, key, path)}
}

func (_c *MockJsonBasic_JSONForget_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonBasic_JSONForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONForget_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONForget_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONForget_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonBasic_JSONForget_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGet provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONGet(ctx context.Context, key string, path string, opts ...goredis.GetOption) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, key, path, opts)
	} else {
		tmpRet = _mock.Called(ctx, key, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONGet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...goredis.GetOption) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...goredis.GetOption) interface{}); ok {
		r0 = returnFunc(ctx, key, path, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...goredis.GetOption) error); ok {
		r1 = returnFunc(ctx, key, path, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGet'
type MockJsonBasic_JSONGet_Call struct {
	*mock.Call
}

// JSONGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - opts ...goredis.GetOption
func (_e *MockJsonBasic_Expecter) JSONGet(ctx interface{}, key interface{}, path interface{}, opts ...interface{}) *MockJsonBasic_JSONGet_Call {
	return &MockJsonBasic_JSONGet_Call{Call: _e.mock.On("JSONGet",
		append([]interface{}{ctx, key, path}, opts...)...)}
}

func (_c *MockJsonBasic_JSONGet_Call) Run(run func(ctx context.Context, key string, path string, opts ...goredis.GetOption)) *MockJsonBasic_JSONGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []goredis.GetOption
		var variadicArgs []goredis.GetOption
		if len(args) > 3 {
			variadicArgs = args[3].([]goredis.GetOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONGet_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONGet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONGet_Call) RunAndReturn(run func(ctx context.Context, key string, path string, opts ...goredis.GetOption) (interface{}, error)) *MockJsonBasic_JSONGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONIncrBy provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONIncrBy(ctx context.Context, key string, path string, number interface{}) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONIncrBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONIncrBy'
type MockJsonBasic_JSONIncrBy_Call struct {
	*mock.Call
}

// JSONIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number interface{}
func (_e *MockJsonBasic_Expecter) JSONIncrBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJsonBasic_JSONIncrBy_Call {
	return &MockJsonBasic_JSONIncrBy_Call{Call: _e.mock.On("JSONIncrBy", ctx, key, path, number)}
}

func (_c *MockJsonBasic_JSONIncrBy_Call) Run(run func(ctx context.Context, key string, path string, number interface{})) *MockJsonBasic_JSONIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONIncrBy_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONIncrBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONIncrBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number interface{}) (interface{}, error)) *MockJsonBasic_JSONIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMGet provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONMGet(ctx context.Context, path string, keys ...string) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, path, keys)
	} else {
		tmpRet = _mock.Called(ctx, path)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONMGet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) (interface{}, error)); ok {
		return returnFunc(ctx, path, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) interface{}); ok {
		r0 = returnFunc(ctx, path, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = returnFunc(ctx, path, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMGet'
type MockJsonBasic_JSONMGet_Call struct {
	*mock.Call
}

// JSONMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - keys ...string
func (_e *MockJsonBasic_Expecter) JSONMGet(ctx interface{}, path interface{}, keys ...interface{}) *MockJsonBasic_JSONMGet_Call {
	return &MockJsonBasic_JSONMGet_Call{Call: _e.mock.On("JSONMGet",
		append([]interface{}{ctx, path}, keys...)...)}
}

func (_c *MockJsonBasic_JSONMGet_Call) Run(run func(ctx context.Context, path string, keys ...string)) *MockJsonBasic_JSONMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONMGet_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONMGet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONMGet_Call) RunAndReturn(run func(ctx context.Context, path string, keys ...string) (interface{}, error)) *MockJsonBasic_JSONMGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONResp provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONResp(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONResp")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONResp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONResp'
type MockJsonBasic_JSONResp_Call struct {
	*mock.Call
}

// JSONResp is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonBasic_Expecter) JSONResp(ctx interface{}, key interface{}, path interface{}) *MockJsonBasic_JSONResp_Call {
	return &MockJsonBasic_JSONResp_Call{Call: _e.mock.On("JSONResp", ctx, key, path)}
}

func (_c *MockJsonBasic_JSONResp_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonBasic_JSONResp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONResp_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONResp_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONResp_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonBasic_JSONResp_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSet provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONSet(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, key, path, obj, opts)
	} else {
		tmpRet = _mock.Called(ctx, key, path, obj)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JSONSet")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...goredis.SetOption) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, obj, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...goredis.SetOption) interface{}); ok {
		r0 = returnFunc(ctx, key, path, obj, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...goredis.SetOption) error); ok {
		r1 = returnFunc(ctx, key, path, obj, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSet'
type MockJsonBasic_JSONSet_Call struct {
	*mock.Call
}

// JSONSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - obj interface{}
//   - opts ...goredis.SetOption
func (_e *MockJsonBasic_Expecter) JSONSet(ctx interface{}, key interface{}, path interface{}, obj interface{}, opts ...interface{}) *MockJsonBasic_JSONSet_Call {
	return &MockJsonBasic_JSONSet_Call{Call: _e.mock.On("JSONSet",
		append([]interface{}{ctx, key, path, obj}, opts...)...)}
}

func (_c *MockJsonBasic_JSONSet_Call) Run(run func(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption)) *MockJsonBasic_JSONSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		var arg4 []goredis.SetOption
		var variadicArgs []goredis.SetOption
		if len(args) > 4 {
			variadicArgs = args[4].([]goredis.SetOption)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONSet_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONSet_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONSet_Call) RunAndReturn(run func(ctx context.Context, key string, path string, obj interface{}, opts ...goredis.SetOption) (interface{}, error)) *MockJsonBasic_JSONSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONType provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) JSONType(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONType")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_JSONType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONType'
type MockJsonBasic_JSONType_Call struct {
	*mock.Call
}

// JSONType is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonBasic_Expecter) JSONType(ctx interface{}, key interface{}, path interface{}) *MockJsonBasic_JSONType_Call {
	return &MockJsonBasic_JSONType_Call{Call: _e.mock.On("JSONType", ctx, key, path)}
}

func (_c *MockJsonBasic_JSONType_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonBasic_JSONType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonBasic_JSONType_Call) Return(ifaceVal interface{}, err error) *MockJsonBasic_JSONType_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonBasic_JSONType_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonBasic_JSONType_Call {
	_c.Call.Return(run)
	return _c
}

// MGetJSON provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) MGetJSON(ctx context.Context, v interface{}, keys ...string) error {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, v, keys)
	} else {
		tmpRet = _mock.Called(ctx, v)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for MGetJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...string) error); ok {
		r0 = returnFunc(ctx, v, keys...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJsonBasic_MGetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGetJSON'
type MockJsonBasic_MGetJSON_Call struct {
	*mock.Call
}

// MGetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
//   - keys ...string
func (_e *MockJsonBasic_Expecter) MGetJSON(ctx interface{}, v interface{}, keys ...interface{}) *MockJsonBasic_MGetJSON_Call {
	return &MockJsonBasic_MGetJSON_Call{Call: _e.mock.On("MGetJSON",
		append([]interface{}{ctx, v}, keys...)...)}
}

func (_c *MockJsonBasic_MGetJSON_Call) Run(run func(ctx context.Context, v interface{}, keys ...string)) *MockJsonBasic_MGetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_MGetJSON_Call) Return(err error) *MockJsonBasic_MGetJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJsonBasic_MGetJSON_Call) RunAndReturn(run func(ctx context.Context, v interface{}, keys ...string) error) *MockJsonBasic_MGetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// MSetJSON provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) MSetJSON(ctx context.Context, params ...goredis.MSetParam) (interface{}, error) {
	var tmpRet mock.Arguments
	if len(params) > 0 {
		tmpRet = _mock.Called(ctx, params)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for MSetJSON")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...goredis.MSetParam) (interface{}, error)); ok {
		return returnFunc(ctx, params...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...goredis.MSetParam) interface{}); ok {
		r0 = returnFunc(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...goredis.MSetParam) error); ok {
		r1 = returnFunc(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonBasic_MSetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSetJSON'
type MockJsonBasic_MSetJSON_Call struct {
	*mock.Call
}

// MSetJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...goredis.MSetParam
func (_e *MockJsonBasic_Expecter) MSetJSON(ctx interface{}, params ...interface{}) *MockJsonBasic_MSetJSON_Call {
	return &MockJsonBasic_MSetJSON_Call{Call: _e.mock.On("MSetJSON",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *MockJsonBasic_MSetJSON_Call) Run(run func(ctx context.Context, params ...goredis.MSetParam)) *MockJsonBasic_MSetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []goredis.MSetParam
		var variadicArgs []goredis.MSetParam
		if len(args) > 1 {
			variadicArgs = args[1].([]goredis.MSetParam)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockJsonBasic_MSetJSON_Call) Return(res interface{}, err error) *MockJsonBasic_MSetJSON_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockJsonBasic_MSetJSON_Call) RunAndReturn(run func(ctx context.Context, params ...goredis.MSetParam) (interface{}, error)) *MockJsonBasic_MSetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockJsonBasic
func (_mock *MockJsonBasic) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJsonBasic_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockJsonBasic_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJsonBasic_Expecter) Ping(ctx interface{}) *MockJsonBasic_Ping_Call {
	return &MockJsonBasic_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockJsonBasic_Ping_Call) Run(run func(ctx context.Context)) *MockJsonBasic_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJsonBasic_Ping_Call) Return(err error) *MockJsonBasic_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJsonBasic_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockJsonBasic_Ping_Call {
	_c.Call.Return(run)
	return _c
}
