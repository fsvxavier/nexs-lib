// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJsonNum creates a new instance of MockJsonNum. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJsonNum(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJsonNum {
	mock := &MockJsonNum{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJsonNum is an autogenerated mock type for the JsonNum type
type MockJsonNum struct {
	mock.Mock
}

type MockJsonNum_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJsonNum) EXPECT() *MockJsonNum_Expecter {
	return &MockJsonNum_Expecter{mock: &_m.Mock}
}

// JSONNumIncrBy provides a mock function for the type MockJsonNum
func (_mock *MockJsonNum) JSONNumIncrBy(ctx context.Context, key string, path string, number int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumIncrBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonNum_JSONNumIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumIncrBy'
type MockJsonNum_JSONNumIncrBy_Call struct {
	*mock.Call
}

// JSONNumIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number int
func (_e *MockJsonNum_Expecter) JSONNumIncrBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJsonNum_JSONNumIncrBy_Call {
	return &MockJsonNum_JSONNumIncrBy_Call{Call: _e.mock.On("JSONNumIncrBy", ctx, key, path, number)}
}

func (_c *MockJsonNum_JSONNumIncrBy_Call) Run(run func(ctx context.Context, key string, path string, number int)) *MockJsonNum_JSONNumIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonNum_JSONNumIncrBy_Call) Return(ifaceVal interface{}, err error) *MockJsonNum_JSONNumIncrBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonNum_JSONNumIncrBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number int) (interface{}, error)) *MockJsonNum_JSONNumIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONNumMultBy provides a mock function for the type MockJsonNum
func (_mock *MockJsonNum) JSONNumMultBy(ctx context.Context, key string, path string, number int) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, number)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumMultBy")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) interface{}); ok {
		r0 = returnFunc(ctx, key, path, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, key, path, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonNum_JSONNumMultBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumMultBy'
type MockJsonNum_JSONNumMultBy_Call struct {
	*mock.Call
}

// JSONNumMultBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - number int
func (_e *MockJsonNum_Expecter) JSONNumMultBy(ctx interface{}, key interface{}, path interface{}, number interface{}) *MockJsonNum_JSONNumMultBy_Call {
	return &MockJsonNum_JSONNumMultBy_Call{Call: _e.mock.On("JSONNumMultBy", ctx, key, path, number)}
}

func (_c *MockJsonNum_JSONNumMultBy_Call) Run(run func(ctx context.Context, key string, path string, number int)) *MockJsonNum_JSONNumMultBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonNum_JSONNumMultBy_Call) Return(ifaceVal interface{}, err error) *MockJsonNum_JSONNumMultBy_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonNum_JSONNumMultBy_Call) RunAndReturn(run func(ctx context.Context, key string, path string, number int) (interface{}, error)) *MockJsonNum_JSONNumMultBy_Call {
	_c.Call.Return(run)
	return _c
}
