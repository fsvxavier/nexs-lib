// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJsonObj creates a new instance of MockJsonObj. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJsonObj(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJsonObj {
	mock := &MockJsonObj{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJsonObj is an autogenerated mock type for the JsonObj type
type MockJsonObj struct {
	mock.Mock
}

type MockJsonObj_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJsonObj) EXPECT() *MockJsonObj_Expecter {
	return &MockJsonObj_Expecter{mock: &_m.Mock}
}

// JSONObjKeys provides a mock function for the type MockJsonObj
func (_mock *MockJsonObj) JSONObjKeys(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjKeys")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonObj_JSONObjKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjKeys'
type MockJsonObj_JSONObjKeys_Call struct {
	*mock.Call
}

// JSONObjKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonObj_Expecter) JSONObjKeys(ctx interface{}, key interface{}, path interface{}) *MockJsonObj_JSONObjKeys_Call {
	return &MockJsonObj_JSONObjKeys_Call{Call: _e.mock.On("JSONObjKeys", ctx, key, path)}
}

func (_c *MockJsonObj_JSONObjKeys_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonObj_JSONObjKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonObj_JSONObjKeys_Call) Return(ifaceVal interface{}, err error) *MockJsonObj_JSONObjKeys_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonObj_JSONObjKeys_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonObj_JSONObjKeys_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjLen provides a mock function for the type MockJsonObj
func (_mock *MockJsonObj) JSONObjLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonObj_JSONObjLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjLen'
type MockJsonObj_JSONObjLen_Call struct {
	*mock.Call
}

// JSONObjLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonObj_Expecter) JSONObjLen(ctx interface{}, key interface{}, path interface{}) *MockJsonObj_JSONObjLen_Call {
	return &MockJsonObj_JSONObjLen_Call{Call: _e.mock.On("JSONObjLen", ctx, key, path)}
}

func (_c *MockJsonObj_JSONObjLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonObj_JSONObjLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonObj_JSONObjLen_Call) Return(ifaceVal interface{}, err error) *MockJsonObj_JSONObjLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonObj_JSONObjLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonObj_JSONObjLen_Call {
	_c.Call.Return(run)
	return _c
}
