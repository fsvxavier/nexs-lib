// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJsonStr creates a new instance of MockJsonStr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJsonStr(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJsonStr {
	mock := &MockJsonStr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJsonStr is an autogenerated mock type for the JsonStr type
type MockJsonStr struct {
	mock.Mock
}

type MockJsonStr_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJsonStr) EXPECT() *MockJsonStr_Expecter {
	return &MockJsonStr_Expecter{mock: &_m.Mock}
}

// JSONStrAppend provides a mock function for the type MockJsonStr
func (_mock *MockJsonStr) JSONStrAppend(ctx context.Context, key string, path string, jsonstring string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path, jsonstring)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrAppend")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path, jsonstring)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path, jsonstring)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, key, path, jsonstring)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonStr_JSONStrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrAppend'
type MockJsonStr_JSONStrAppend_Call struct {
	*mock.Call
}

// JSONStrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - jsonstring string
func (_e *MockJsonStr_Expecter) JSONStrAppend(ctx interface{}, key interface{}, path interface{}, jsonstring interface{}) *MockJsonStr_JSONStrAppend_Call {
	return &MockJsonStr_JSONStrAppend_Call{Call: _e.mock.On("JSONStrAppend", ctx, key, path, jsonstring)}
}

func (_c *MockJsonStr_JSONStrAppend_Call) Run(run func(ctx context.Context, key string, path string, jsonstring string)) *MockJsonStr_JSONStrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJsonStr_JSONStrAppend_Call) Return(ifaceVal interface{}, err error) *MockJsonStr_JSONStrAppend_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonStr_JSONStrAppend_Call) RunAndReturn(run func(ctx context.Context, key string, path string, jsonstring string) (interface{}, error)) *MockJsonStr_JSONStrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrLen provides a mock function for the type MockJsonStr
func (_mock *MockJsonStr) JSONStrLen(ctx context.Context, key string, path string) (interface{}, error) {
	ret := _mock.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrLen")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return returnFunc(ctx, key, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = returnFunc(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJsonStr_JSONStrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrLen'
type MockJsonStr_JSONStrLen_Call struct {
	*mock.Call
}

// JSONStrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJsonStr_Expecter) JSONStrLen(ctx interface{}, key interface{}, path interface{}) *MockJsonStr_JSONStrLen_Call {
	return &MockJsonStr_JSONStrLen_Call{Call: _e.mock.On("JSONStrLen", ctx, key, path)}
}

func (_c *MockJsonStr_JSONStrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJsonStr_JSONStrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJsonStr_JSONStrLen_Call) Return(ifaceVal interface{}, err error) *MockJsonStr_JSONStrLen_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockJsonStr_JSONStrLen_Call) RunAndReturn(run func(ctx context.Context, key string, path string) (interface{}, error)) *MockJsonStr_JSONStrLen_Call {
	_c.Call.Return(run)
	return _c
}
