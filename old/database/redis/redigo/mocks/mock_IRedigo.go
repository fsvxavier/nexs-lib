// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/gomodule/redigo/redis"

	time "time"
)

// IRedigo is an autogenerated mock type for the IRedigo type
type IRedigo struct {
	mock.Mock
}

type IRedigo_Expecter struct {
	mock *mock.Mock
}

func (_m *IRedigo) EXPECT() *IRedigo_Expecter {
	return &IRedigo_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: ctx
func (_m *IRedigo) Acquire(ctx context.Context) (redis.Conn, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 redis.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (redis.Conn, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) redis.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedigo_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type IRedigo_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IRedigo_Expecter) Acquire(ctx interface{}) *IRedigo_Acquire_Call {
	return &IRedigo_Acquire_Call{Call: _e.mock.On("Acquire", ctx)}
}

func (_c *IRedigo_Acquire_Call) Run(run func(ctx context.Context)) *IRedigo_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IRedigo_Acquire_Call) Return(conn redis.Conn, err error) *IRedigo_Acquire_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *IRedigo_Acquire_Call) RunAndReturn(run func(context.Context) (redis.Conn, error)) *IRedigo_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *IRedigo) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedigo_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IRedigo_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IRedigo_Expecter) Close() *IRedigo_Close_Call {
	return &IRedigo_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IRedigo_Close_Call) Run(run func()) *IRedigo_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRedigo_Close_Call) Return(err error) *IRedigo_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IRedigo_Close_Call) RunAndReturn(run func() error) *IRedigo_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *IRedigo) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedigo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IRedigo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *IRedigo_Expecter) Get(ctx interface{}, key interface{}) *IRedigo_Get_Call {
	return &IRedigo_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *IRedigo_Get_Call) Run(run func(ctx context.Context, key string)) *IRedigo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IRedigo_Get_Call) Return(_a0 string, _a1 error) *IRedigo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRedigo_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *IRedigo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HGet provides a mock function with given fields: ctx, hash, key
func (_m *IRedigo) HGet(ctx context.Context, hash string, key string) (string, error) {
	ret := _m.Called(ctx, hash, key)

	if len(ret) == 0 {
		panic("no return value specified for HGet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, hash, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, hash, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, hash, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedigo_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type IRedigo_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
//   - key string
func (_e *IRedigo_Expecter) HGet(ctx interface{}, hash interface{}, key interface{}) *IRedigo_HGet_Call {
	return &IRedigo_HGet_Call{Call: _e.mock.On("HGet", ctx, hash, key)}
}

func (_c *IRedigo_HGet_Call) Run(run func(ctx context.Context, hash string, key string)) *IRedigo_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IRedigo_HGet_Call) Return(_a0 string, _a1 error) *IRedigo_HGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRedigo_HGet_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *IRedigo_HGet_Call {
	_c.Call.Return(run)
	return _c
}

// HSet provides a mock function with given fields: ctx, hash, key, val
func (_m *IRedigo) HSet(ctx context.Context, hash string, key string, val string) error {
	ret := _m.Called(ctx, hash, key, val)

	if len(ret) == 0 {
		panic("no return value specified for HSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, hash, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedigo_HSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSet'
type IRedigo_HSet_Call struct {
	*mock.Call
}

// HSet is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
//   - key string
//   - val string
func (_e *IRedigo_Expecter) HSet(ctx interface{}, hash interface{}, key interface{}, val interface{}) *IRedigo_HSet_Call {
	return &IRedigo_HSet_Call{Call: _e.mock.On("HSet", ctx, hash, key, val)}
}

func (_c *IRedigo_HSet_Call) Run(run func(ctx context.Context, hash string, key string, val string)) *IRedigo_HSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IRedigo_HSet_Call) Return(_a0 error) *IRedigo_HSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedigo_HSet_Call) RunAndReturn(run func(context.Context, string, string, string) error) *IRedigo_HSet_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, val, exp
func (_m *IRedigo) Set(ctx context.Context, key string, val string, exp time.Duration) error {
	ret := _m.Called(ctx, key, val, exp)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, val, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedigo_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type IRedigo_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - val string
//   - exp time.Duration
func (_e *IRedigo_Expecter) Set(ctx interface{}, key interface{}, val interface{}, exp interface{}) *IRedigo_Set_Call {
	return &IRedigo_Set_Call{Call: _e.mock.On("Set", ctx, key, val, exp)}
}

func (_c *IRedigo_Set_Call) Run(run func(ctx context.Context, key string, val string, exp time.Duration)) *IRedigo_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *IRedigo_Set_Call) Return(_a0 error) *IRedigo_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedigo_Set_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *IRedigo_Set_Call {
	_c.Call.Return(run)
	return _c
}

// WithDatabase provides a mock function with given fields: ctx, db
func (_m *IRedigo) WithDatabase(ctx context.Context, db int) error {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for WithDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedigo_WithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDatabase'
type IRedigo_WithDatabase_Call struct {
	*mock.Call
}

// WithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - db int
func (_e *IRedigo_Expecter) WithDatabase(ctx interface{}, db interface{}) *IRedigo_WithDatabase_Call {
	return &IRedigo_WithDatabase_Call{Call: _e.mock.On("WithDatabase", ctx, db)}
}

func (_c *IRedigo_WithDatabase_Call) Run(run func(ctx context.Context, db int)) *IRedigo_WithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IRedigo_WithDatabase_Call) Return(_a0 error) *IRedigo_WithDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedigo_WithDatabase_Call) RunAndReturn(run func(context.Context, int) error) *IRedigo_WithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRedigo creates a new instance of IRedigo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedigo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedigo {
	mock := &IRedigo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
