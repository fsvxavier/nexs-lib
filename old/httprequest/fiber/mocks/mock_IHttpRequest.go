// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dock-tech/isis-golang-lib/httprequest/fiber"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHttpRequest creates a new instance of MockIHttpRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHttpRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHttpRequest {
	mock := &MockIHttpRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHttpRequest is an autogenerated mock type for the IHttpRequest type
type MockIHttpRequest struct {
	mock.Mock
}

type MockIHttpRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHttpRequest) EXPECT() *MockIHttpRequest_Expecter {
	return &MockIHttpRequest_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Delete(endpoint string) (*fiber.Response, error) {
	ret := _mock.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *fiber.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*fiber.Response, error)); ok {
		return returnFunc(endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *fiber.Response); ok {
		r0 = returnFunc(endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fiber.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIHttpRequest_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - endpoint string
func (_e *MockIHttpRequest_Expecter) Delete(endpoint interface{}) *MockIHttpRequest_Delete_Call {
	return &MockIHttpRequest_Delete_Call{Call: _e.mock.On("Delete", endpoint)}
}

func (_c *MockIHttpRequest_Delete_Call) Run(run func(endpoint string)) *MockIHttpRequest_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Delete_Call) Return(response *fiber.Response, err error) *MockIHttpRequest_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Delete_Call) RunAndReturn(run func(endpoint string) (*fiber.Response, error)) *MockIHttpRequest_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Get(endpoint string) (*fiber.Response, error) {
	ret := _mock.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *fiber.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*fiber.Response, error)); ok {
		return returnFunc(endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *fiber.Response); ok {
		r0 = returnFunc(endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fiber.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIHttpRequest_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - endpoint string
func (_e *MockIHttpRequest_Expecter) Get(endpoint interface{}) *MockIHttpRequest_Get_Call {
	return &MockIHttpRequest_Get_Call{Call: _e.mock.On("Get", endpoint)}
}

func (_c *MockIHttpRequest_Get_Call) Run(run func(endpoint string)) *MockIHttpRequest_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Get_Call) Return(response *fiber.Response, err error) *MockIHttpRequest_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Get_Call) RunAndReturn(run func(endpoint string) (*fiber.Response, error)) *MockIHttpRequest_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Post(endpoint string, body []byte) (*fiber.Response, error) {
	ret := _mock.Called(endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *fiber.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) (*fiber.Response, error)); ok {
		return returnFunc(endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []byte) *fiber.Response); ok {
		r0 = returnFunc(endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fiber.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = returnFunc(endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockIHttpRequest_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequest_Expecter) Post(endpoint interface{}, body interface{}) *MockIHttpRequest_Post_Call {
	return &MockIHttpRequest_Post_Call{Call: _e.mock.On("Post", endpoint, body)}
}

func (_c *MockIHttpRequest_Post_Call) Run(run func(endpoint string, body []byte)) *MockIHttpRequest_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Post_Call) Return(response *fiber.Response, err error) *MockIHttpRequest_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Post_Call) RunAndReturn(run func(endpoint string, body []byte) (*fiber.Response, error)) *MockIHttpRequest_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Put(endpoint string, body []byte) (*fiber.Response, error) {
	ret := _mock.Called(endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *fiber.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) (*fiber.Response, error)); ok {
		return returnFunc(endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []byte) *fiber.Response); ok {
		r0 = returnFunc(endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fiber.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = returnFunc(endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockIHttpRequest_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequest_Expecter) Put(endpoint interface{}, body interface{}) *MockIHttpRequest_Put_Call {
	return &MockIHttpRequest_Put_Call{Call: _e.mock.On("Put", endpoint, body)}
}

func (_c *MockIHttpRequest_Put_Call) Run(run func(endpoint string, body []byte)) *MockIHttpRequest_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Put_Call) Return(response *fiber.Response, err error) *MockIHttpRequest_Put_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Put_Call) RunAndReturn(run func(endpoint string, body []byte) (*fiber.Response, error)) *MockIHttpRequest_Put_Call {
	_c.Call.Return(run)
	return _c
}
