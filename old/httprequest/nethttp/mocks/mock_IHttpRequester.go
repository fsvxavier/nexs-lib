// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dock-tech/isis-golang-lib/httprequest/nethttp"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHttpRequester creates a new instance of MockIHttpRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHttpRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHttpRequester {
	mock := &MockIHttpRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHttpRequester is an autogenerated mock type for the IHttpRequester type
type MockIHttpRequester struct {
	mock.Mock
}

type MockIHttpRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHttpRequester) EXPECT() *MockIHttpRequester_Expecter {
	return &MockIHttpRequester_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Delete(ctx context.Context, endpoint string) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIHttpRequester_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
func (_e *MockIHttpRequester_Expecter) Delete(ctx interface{}, endpoint interface{}) *MockIHttpRequester_Delete_Call {
	return &MockIHttpRequester_Delete_Call{Call: _e.mock.On("Delete", ctx, endpoint)}
}

func (_c *MockIHttpRequester_Delete_Call) Run(run func(ctx context.Context, endpoint string)) *MockIHttpRequester_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Delete_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Delete_Call) RunAndReturn(run func(ctx context.Context, endpoint string) (*nethttp.Response, error)) *MockIHttpRequester_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Get(ctx context.Context, endpoint string) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIHttpRequester_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
func (_e *MockIHttpRequester_Expecter) Get(ctx interface{}, endpoint interface{}) *MockIHttpRequester_Get_Call {
	return &MockIHttpRequester_Get_Call{Call: _e.mock.On("Get", ctx, endpoint)}
}

func (_c *MockIHttpRequester_Get_Call) Run(run func(ctx context.Context, endpoint string)) *MockIHttpRequester_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Get_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Get_Call) RunAndReturn(run func(ctx context.Context, endpoint string) (*nethttp.Response, error)) *MockIHttpRequester_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Head(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = returnFunc(ctx, endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockIHttpRequester_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequester_Expecter) Head(ctx interface{}, endpoint interface{}, body interface{}) *MockIHttpRequester_Head_Call {
	return &MockIHttpRequester_Head_Call{Call: _e.mock.On("Head", ctx, endpoint, body)}
}

func (_c *MockIHttpRequester_Head_Call) Run(run func(ctx context.Context, endpoint string, body []byte)) *MockIHttpRequester_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Head_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Head_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Head_Call) RunAndReturn(run func(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error)) *MockIHttpRequester_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Patch(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = returnFunc(ctx, endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockIHttpRequester_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequester_Expecter) Patch(ctx interface{}, endpoint interface{}, body interface{}) *MockIHttpRequester_Patch_Call {
	return &MockIHttpRequester_Patch_Call{Call: _e.mock.On("Patch", ctx, endpoint, body)}
}

func (_c *MockIHttpRequester_Patch_Call) Run(run func(ctx context.Context, endpoint string, body []byte)) *MockIHttpRequester_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Patch_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Patch_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Patch_Call) RunAndReturn(run func(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error)) *MockIHttpRequester_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Post(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = returnFunc(ctx, endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockIHttpRequester_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequester_Expecter) Post(ctx interface{}, endpoint interface{}, body interface{}) *MockIHttpRequester_Post_Call {
	return &MockIHttpRequester_Post_Call{Call: _e.mock.On("Post", ctx, endpoint, body)}
}

func (_c *MockIHttpRequester_Post_Call) Run(run func(ctx context.Context, endpoint string, body []byte)) *MockIHttpRequester_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Post_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Post_Call) RunAndReturn(run func(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error)) *MockIHttpRequester_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Put(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error) {
	ret := _mock.Called(ctx, endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *nethttp.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) (*nethttp.Response, error)); ok {
		return returnFunc(ctx, endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) *nethttp.Response); ok {
		r0 = returnFunc(ctx, endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = returnFunc(ctx, endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequester_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockIHttpRequester_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - body []byte
func (_e *MockIHttpRequester_Expecter) Put(ctx interface{}, endpoint interface{}, body interface{}) *MockIHttpRequester_Put_Call {
	return &MockIHttpRequester_Put_Call{Call: _e.mock.On("Put", ctx, endpoint, body)}
}

func (_c *MockIHttpRequester_Put_Call) Run(run func(ctx context.Context, endpoint string, body []byte)) *MockIHttpRequester_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Put_Call) Return(response *nethttp.Response, err error) *MockIHttpRequester_Put_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequester_Put_Call) RunAndReturn(run func(ctx context.Context, endpoint string, body []byte) (*nethttp.Response, error)) *MockIHttpRequester_Put_Call {
	_c.Call.Return(run)
	return _c
}

// SetBaseURL provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) SetBaseURL(baseURL string) *nethttp.Requester {
	ret := _mock.Called(baseURL)

	if len(ret) == 0 {
		panic("no return value specified for SetBaseURL")
	}

	var r0 *nethttp.Requester
	if returnFunc, ok := ret.Get(0).(func(string) *nethttp.Requester); ok {
		r0 = returnFunc(baseURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Requester)
		}
	}
	return r0
}

// MockIHttpRequester_SetBaseURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBaseURL'
type MockIHttpRequester_SetBaseURL_Call struct {
	*mock.Call
}

// SetBaseURL is a helper method to define mock.On call
//   - baseURL string
func (_e *MockIHttpRequester_Expecter) SetBaseURL(baseURL interface{}) *MockIHttpRequester_SetBaseURL_Call {
	return &MockIHttpRequester_SetBaseURL_Call{Call: _e.mock.On("SetBaseURL", baseURL)}
}

func (_c *MockIHttpRequester_SetBaseURL_Call) Run(run func(baseURL string)) *MockIHttpRequester_SetBaseURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_SetBaseURL_Call) Return(requester *nethttp.Requester) *MockIHttpRequester_SetBaseURL_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequester_SetBaseURL_Call) RunAndReturn(run func(baseURL string) *nethttp.Requester) *MockIHttpRequester_SetBaseURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeaders provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) SetHeaders(headers map[string]string) *nethttp.Requester {
	ret := _mock.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for SetHeaders")
	}

	var r0 *nethttp.Requester
	if returnFunc, ok := ret.Get(0).(func(map[string]string) *nethttp.Requester); ok {
		r0 = returnFunc(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Requester)
		}
	}
	return r0
}

// MockIHttpRequester_SetHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeaders'
type MockIHttpRequester_SetHeaders_Call struct {
	*mock.Call
}

// SetHeaders is a helper method to define mock.On call
//   - headers map[string]string
func (_e *MockIHttpRequester_Expecter) SetHeaders(headers interface{}) *MockIHttpRequester_SetHeaders_Call {
	return &MockIHttpRequester_SetHeaders_Call{Call: _e.mock.On("SetHeaders", headers)}
}

func (_c *MockIHttpRequester_SetHeaders_Call) Run(run func(headers map[string]string)) *MockIHttpRequester_SetHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_SetHeaders_Call) Return(requester *nethttp.Requester) *MockIHttpRequester_SetHeaders_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequester_SetHeaders_Call) RunAndReturn(run func(headers map[string]string) *nethttp.Requester) *MockIHttpRequester_SetHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function for the type MockIHttpRequester
func (_mock *MockIHttpRequester) Unmarshal(v any) *nethttp.Requester {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 *nethttp.Requester
	if returnFunc, ok := ret.Get(0).(func(any) *nethttp.Requester); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Requester)
		}
	}
	return r0
}

// MockIHttpRequester_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockIHttpRequester_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - v any
func (_e *MockIHttpRequester_Expecter) Unmarshal(v interface{}) *MockIHttpRequester_Unmarshal_Call {
	return &MockIHttpRequester_Unmarshal_Call{Call: _e.mock.On("Unmarshal", v)}
}

func (_c *MockIHttpRequester_Unmarshal_Call) Run(run func(v any)) *MockIHttpRequester_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequester_Unmarshal_Call) Return(requester *nethttp.Requester) *MockIHttpRequester_Unmarshal_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequester_Unmarshal_Call) RunAndReturn(run func(v any) *nethttp.Requester) *MockIHttpRequester_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}
