// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dock-tech/isis-golang-lib/httprequest/resty"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHttpRequest creates a new instance of MockIHttpRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHttpRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHttpRequest {
	mock := &MockIHttpRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHttpRequest is an autogenerated mock type for the IHttpRequest type
type MockIHttpRequest struct {
	mock.Mock
}

type MockIHttpRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHttpRequest) EXPECT() *MockIHttpRequest_Expecter {
	return &MockIHttpRequest_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Delete(endpoint string) (*resty.Response, error) {
	ret := _mock.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*resty.Response, error)); ok {
		return returnFunc(endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *resty.Response); ok {
		r0 = returnFunc(endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIHttpRequest_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - endpoint string
func (_e *MockIHttpRequest_Expecter) Delete(endpoint interface{}) *MockIHttpRequest_Delete_Call {
	return &MockIHttpRequest_Delete_Call{Call: _e.mock.On("Delete", endpoint)}
}

func (_c *MockIHttpRequest_Delete_Call) Run(run func(endpoint string)) *MockIHttpRequest_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Delete_Call) Return(response *resty.Response, err error) *MockIHttpRequest_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Delete_Call) RunAndReturn(run func(endpoint string) (*resty.Response, error)) *MockIHttpRequest_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Get(endpoint string) (*resty.Response, error) {
	ret := _mock.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*resty.Response, error)); ok {
		return returnFunc(endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *resty.Response); ok {
		r0 = returnFunc(endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(endpoint)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIHttpRequest_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - endpoint string
func (_e *MockIHttpRequest_Expecter) Get(endpoint interface{}) *MockIHttpRequest_Get_Call {
	return &MockIHttpRequest_Get_Call{Call: _e.mock.On("Get", endpoint)}
}

func (_c *MockIHttpRequest_Get_Call) Run(run func(endpoint string)) *MockIHttpRequest_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Get_Call) Return(response *resty.Response, err error) *MockIHttpRequest_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Get_Call) RunAndReturn(run func(endpoint string) (*resty.Response, error)) *MockIHttpRequest_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Post(endpoint string, body interface{}) (*resty.Response, error) {
	ret := _mock.Called(endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) (*resty.Response, error)); ok {
		return returnFunc(endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) *resty.Response); ok {
		r0 = returnFunc(endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = returnFunc(endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockIHttpRequest_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - endpoint string
//   - body interface{}
func (_e *MockIHttpRequest_Expecter) Post(endpoint interface{}, body interface{}) *MockIHttpRequest_Post_Call {
	return &MockIHttpRequest_Post_Call{Call: _e.mock.On("Post", endpoint, body)}
}

func (_c *MockIHttpRequest_Post_Call) Run(run func(endpoint string, body interface{})) *MockIHttpRequest_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Post_Call) Return(response *resty.Response, err error) *MockIHttpRequest_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Post_Call) RunAndReturn(run func(endpoint string, body interface{}) (*resty.Response, error)) *MockIHttpRequest_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Put(endpoint string, body interface{}) (*resty.Response, error) {
	ret := _mock.Called(endpoint, body)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) (*resty.Response, error)); ok {
		return returnFunc(endpoint, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) *resty.Response); ok {
		r0 = returnFunc(endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = returnFunc(endpoint, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHttpRequest_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockIHttpRequest_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - endpoint string
//   - body interface{}
func (_e *MockIHttpRequest_Expecter) Put(endpoint interface{}, body interface{}) *MockIHttpRequest_Put_Call {
	return &MockIHttpRequest_Put_Call{Call: _e.mock.On("Put", endpoint, body)}
}

func (_c *MockIHttpRequest_Put_Call) Run(run func(endpoint string, body interface{})) *MockIHttpRequest_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Put_Call) Return(response *resty.Response, err error) *MockIHttpRequest_Put_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIHttpRequest_Put_Call) RunAndReturn(run func(endpoint string, body interface{}) (*resty.Response, error)) *MockIHttpRequest_Put_Call {
	_c.Call.Return(run)
	return _c
}

// SetBaseURL provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) SetBaseURL(baseURL string) *resty.Requester {
	ret := _mock.Called(baseURL)

	if len(ret) == 0 {
		panic("no return value specified for SetBaseURL")
	}

	var r0 *resty.Requester
	if returnFunc, ok := ret.Get(0).(func(string) *resty.Requester); ok {
		r0 = returnFunc(baseURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Requester)
		}
	}
	return r0
}

// MockIHttpRequest_SetBaseURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBaseURL'
type MockIHttpRequest_SetBaseURL_Call struct {
	*mock.Call
}

// SetBaseURL is a helper method to define mock.On call
//   - baseURL string
func (_e *MockIHttpRequest_Expecter) SetBaseURL(baseURL interface{}) *MockIHttpRequest_SetBaseURL_Call {
	return &MockIHttpRequest_SetBaseURL_Call{Call: _e.mock.On("SetBaseURL", baseURL)}
}

func (_c *MockIHttpRequest_SetBaseURL_Call) Run(run func(baseURL string)) *MockIHttpRequest_SetBaseURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_SetBaseURL_Call) Return(requester *resty.Requester) *MockIHttpRequest_SetBaseURL_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequest_SetBaseURL_Call) RunAndReturn(run func(baseURL string) *resty.Requester) *MockIHttpRequest_SetBaseURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetErrorHandler provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) SetErrorHandler(h resty.ErrorHandler) *resty.Requester {
	ret := _mock.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for SetErrorHandler")
	}

	var r0 *resty.Requester
	if returnFunc, ok := ret.Get(0).(func(resty.ErrorHandler) *resty.Requester); ok {
		r0 = returnFunc(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Requester)
		}
	}
	return r0
}

// MockIHttpRequest_SetErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorHandler'
type MockIHttpRequest_SetErrorHandler_Call struct {
	*mock.Call
}

// SetErrorHandler is a helper method to define mock.On call
//   - h resty.ErrorHandler
func (_e *MockIHttpRequest_Expecter) SetErrorHandler(h interface{}) *MockIHttpRequest_SetErrorHandler_Call {
	return &MockIHttpRequest_SetErrorHandler_Call{Call: _e.mock.On("SetErrorHandler", h)}
}

func (_c *MockIHttpRequest_SetErrorHandler_Call) Run(run func(h resty.ErrorHandler)) *MockIHttpRequest_SetErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 resty.ErrorHandler
		if args[0] != nil {
			arg0 = args[0].(resty.ErrorHandler)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_SetErrorHandler_Call) Return(requester *resty.Requester) *MockIHttpRequest_SetErrorHandler_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequest_SetErrorHandler_Call) RunAndReturn(run func(h resty.ErrorHandler) *resty.Requester) *MockIHttpRequest_SetErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeaders provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) SetHeaders(headers map[string]string) *resty.Requester {
	ret := _mock.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for SetHeaders")
	}

	var r0 *resty.Requester
	if returnFunc, ok := ret.Get(0).(func(map[string]string) *resty.Requester); ok {
		r0 = returnFunc(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Requester)
		}
	}
	return r0
}

// MockIHttpRequest_SetHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeaders'
type MockIHttpRequest_SetHeaders_Call struct {
	*mock.Call
}

// SetHeaders is a helper method to define mock.On call
//   - headers map[string]string
func (_e *MockIHttpRequest_Expecter) SetHeaders(headers interface{}) *MockIHttpRequest_SetHeaders_Call {
	return &MockIHttpRequest_SetHeaders_Call{Call: _e.mock.On("SetHeaders", headers)}
}

func (_c *MockIHttpRequest_SetHeaders_Call) Run(run func(headers map[string]string)) *MockIHttpRequest_SetHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_SetHeaders_Call) Return(requester *resty.Requester) *MockIHttpRequest_SetHeaders_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequest_SetHeaders_Call) RunAndReturn(run func(headers map[string]string) *resty.Requester) *MockIHttpRequest_SetHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function for the type MockIHttpRequest
func (_mock *MockIHttpRequest) Unmarshal(v any) *resty.Requester {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 *resty.Requester
	if returnFunc, ok := ret.Get(0).(func(any) *resty.Requester); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Requester)
		}
	}
	return r0
}

// MockIHttpRequest_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockIHttpRequest_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - v any
func (_e *MockIHttpRequest_Expecter) Unmarshal(v interface{}) *MockIHttpRequest_Unmarshal_Call {
	return &MockIHttpRequest_Unmarshal_Call{Call: _e.mock.On("Unmarshal", v)}
}

func (_c *MockIHttpRequest_Unmarshal_Call) Run(run func(v any)) *MockIHttpRequest_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHttpRequest_Unmarshal_Call) Return(requester *resty.Requester) *MockIHttpRequest_Unmarshal_Call {
	_c.Call.Return(requester)
	return _c
}

func (_c *MockIHttpRequest_Unmarshal_Call) RunAndReturn(run func(v any) *resty.Requester) *MockIHttpRequest_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}
