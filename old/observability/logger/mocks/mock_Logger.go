// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// DebugCode provides a mock function for the type MockLogger
func (_mock *MockLogger) DebugCode(ctx context.Context, code string, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, code, format, args)
	} else {
		_mock.Called(ctx, code, format)
	}

	return
}

// MockLogger_DebugCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebugCode'
type MockLogger_DebugCode_Call struct {
	*mock.Call
}

// DebugCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) DebugCode(ctx interface{}, code interface{}, format interface{}, args ...interface{}) *MockLogger_DebugCode_Call {
	return &MockLogger_DebugCode_Call{Call: _e.mock.On("DebugCode",
		append([]interface{}{ctx, code, format}, args...)...)}
}

func (_c *MockLogger_DebugCode_Call) Run(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_DebugCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockLogger_DebugCode_Call) Return() *MockLogger_DebugCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_DebugCode_Call) RunAndReturn(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_DebugCode_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function for the type MockLogger
func (_mock *MockLogger) Debugf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// MockLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Debugf(ctx interface{}, format interface{}, args ...interface{}) *MockLogger_Debugf_Call {
	return &MockLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *MockLogger_Debugf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Debugf_Call) Return() *MockLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// ErrorCode provides a mock function for the type MockLogger
func (_mock *MockLogger) ErrorCode(ctx context.Context, code string, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, code, format, args)
	} else {
		_mock.Called(ctx, code, format)
	}

	return
}

// MockLogger_ErrorCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorCode'
type MockLogger_ErrorCode_Call struct {
	*mock.Call
}

// ErrorCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) ErrorCode(ctx interface{}, code interface{}, format interface{}, args ...interface{}) *MockLogger_ErrorCode_Call {
	return &MockLogger_ErrorCode_Call{Call: _e.mock.On("ErrorCode",
		append([]interface{}{ctx, code, format}, args...)...)}
}

func (_c *MockLogger_ErrorCode_Call) Run(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_ErrorCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockLogger_ErrorCode_Call) Return() *MockLogger_ErrorCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_ErrorCode_Call) RunAndReturn(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_ErrorCode_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type MockLogger
func (_mock *MockLogger) Errorf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// MockLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Errorf(ctx interface{}, format interface{}, args ...interface{}) *MockLogger_Errorf_Call {
	return &MockLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *MockLogger_Errorf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Errorf_Call) Return() *MockLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// InfoCode provides a mock function for the type MockLogger
func (_mock *MockLogger) InfoCode(ctx context.Context, code string, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, code, format, args)
	} else {
		_mock.Called(ctx, code, format)
	}

	return
}

// MockLogger_InfoCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoCode'
type MockLogger_InfoCode_Call struct {
	*mock.Call
}

// InfoCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) InfoCode(ctx interface{}, code interface{}, format interface{}, args ...interface{}) *MockLogger_InfoCode_Call {
	return &MockLogger_InfoCode_Call{Call: _e.mock.On("InfoCode",
		append([]interface{}{ctx, code, format}, args...)...)}
}

func (_c *MockLogger_InfoCode_Call) Run(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_InfoCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockLogger_InfoCode_Call) Return() *MockLogger_InfoCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_InfoCode_Call) RunAndReturn(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_InfoCode_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type MockLogger
func (_mock *MockLogger) Infof(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// MockLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Infof(ctx interface{}, format interface{}, args ...interface{}) *MockLogger_Infof_Call {
	return &MockLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *MockLogger_Infof_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Infof_Call) Return() *MockLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infof_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// PanicCode provides a mock function for the type MockLogger
func (_mock *MockLogger) PanicCode(ctx context.Context, code string, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, code, format, args)
	} else {
		_mock.Called(ctx, code, format)
	}

	return
}

// MockLogger_PanicCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PanicCode'
type MockLogger_PanicCode_Call struct {
	*mock.Call
}

// PanicCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) PanicCode(ctx interface{}, code interface{}, format interface{}, args ...interface{}) *MockLogger_PanicCode_Call {
	return &MockLogger_PanicCode_Call{Call: _e.mock.On("PanicCode",
		append([]interface{}{ctx, code, format}, args...)...)}
}

func (_c *MockLogger_PanicCode_Call) Run(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_PanicCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockLogger_PanicCode_Call) Return() *MockLogger_PanicCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_PanicCode_Call) RunAndReturn(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_PanicCode_Call {
	_c.Run(run)
	return _c
}

// Panicf provides a mock function for the type MockLogger
func (_mock *MockLogger) Panicf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// MockLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Panicf(ctx interface{}, format interface{}, args ...interface{}) *MockLogger_Panicf_Call {
	return &MockLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *MockLogger_Panicf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Panicf_Call) Return() *MockLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Panicf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Panicf_Call {
	_c.Run(run)
	return _c
}

// WarnCode provides a mock function for the type MockLogger
func (_mock *MockLogger) WarnCode(ctx context.Context, code string, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, code, format, args)
	} else {
		_mock.Called(ctx, code, format)
	}

	return
}

// MockLogger_WarnCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnCode'
type MockLogger_WarnCode_Call struct {
	*mock.Call
}

// WarnCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) WarnCode(ctx interface{}, code interface{}, format interface{}, args ...interface{}) *MockLogger_WarnCode_Call {
	return &MockLogger_WarnCode_Call{Call: _e.mock.On("WarnCode",
		append([]interface{}{ctx, code, format}, args...)...)}
}

func (_c *MockLogger_WarnCode_Call) Run(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_WarnCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		var variadicArgs []interface{}
		if len(args) > 3 {
			variadicArgs = args[3].([]interface{})
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockLogger_WarnCode_Call) Return() *MockLogger_WarnCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_WarnCode_Call) RunAndReturn(run func(ctx context.Context, code string, format string, args ...interface{})) *MockLogger_WarnCode_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function for the type MockLogger
func (_mock *MockLogger) Warnf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// MockLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warnf(ctx interface{}, format interface{}, args ...interface{}) *MockLogger_Warnf_Call {
	return &MockLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *MockLogger_Warnf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Warnf_Call) Return() *MockLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warnf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *MockLogger_Warnf_Call {
	_c.Run(run)
	return _c
}
