// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dock-tech/isis-golang-lib/observability/tracer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// SpanFromContext provides a mock function for the type MockProvider
func (_mock *MockProvider) SpanFromContext(ctx context.Context) (tracer.SpanTrace, bool) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SpanFromContext")
	}

	var r0 tracer.SpanTrace
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) (tracer.SpanTrace, bool)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) tracer.SpanTrace); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tracer.SpanTrace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockProvider_SpanFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpanFromContext'
type MockProvider_SpanFromContext_Call struct {
	*mock.Call
}

// SpanFromContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) SpanFromContext(ctx interface{}) *MockProvider_SpanFromContext_Call {
	return &MockProvider_SpanFromContext_Call{Call: _e.mock.On("SpanFromContext", ctx)}
}

func (_c *MockProvider_SpanFromContext_Call) Run(run func(ctx context.Context)) *MockProvider_SpanFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_SpanFromContext_Call) Return(spanTrace tracer.SpanTrace, b bool) *MockProvider_SpanFromContext_Call {
	_c.Call.Return(spanTrace, b)
	return _c
}

func (_c *MockProvider_SpanFromContext_Call) RunAndReturn(run func(ctx context.Context) (tracer.SpanTrace, bool)) *MockProvider_SpanFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpanFromContext provides a mock function for the type MockProvider
func (_mock *MockProvider) StartSpanFromContext(ctx context.Context, spanName string) (context.Context, tracer.SpanTrace) {
	ret := _mock.Called(ctx, spanName)

	if len(ret) == 0 {
		panic("no return value specified for StartSpanFromContext")
	}

	var r0 context.Context
	var r1 tracer.SpanTrace
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (context.Context, tracer.SpanTrace)); ok {
		return returnFunc(ctx, spanName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = returnFunc(ctx, spanName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) tracer.SpanTrace); ok {
		r1 = returnFunc(ctx, spanName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tracer.SpanTrace)
		}
	}
	return r0, r1
}

// MockProvider_StartSpanFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpanFromContext'
type MockProvider_StartSpanFromContext_Call struct {
	*mock.Call
}

// StartSpanFromContext is a helper method to define mock.On call
//   - ctx context.Context
//   - spanName string
func (_e *MockProvider_Expecter) StartSpanFromContext(ctx interface{}, spanName interface{}) *MockProvider_StartSpanFromContext_Call {
	return &MockProvider_StartSpanFromContext_Call{Call: _e.mock.On("StartSpanFromContext", ctx, spanName)}
}

func (_c *MockProvider_StartSpanFromContext_Call) Run(run func(ctx context.Context, spanName string)) *MockProvider_StartSpanFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_StartSpanFromContext_Call) Return(context1 context.Context, spanTrace tracer.SpanTrace) *MockProvider_StartSpanFromContext_Call {
	_c.Call.Return(context1, spanTrace)
	return _c
}

func (_c *MockProvider_StartSpanFromContext_Call) RunAndReturn(run func(ctx context.Context, spanName string) (context.Context, tracer.SpanTrace)) *MockProvider_StartSpanFromContext_Call {
	_c.Call.Return(run)
	return _c
}
