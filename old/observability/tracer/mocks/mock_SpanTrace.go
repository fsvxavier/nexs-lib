// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockSpanTrace creates a new instance of MockSpanTrace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpanTrace(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpanTrace {
	mock := &MockSpanTrace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSpanTrace is an autogenerated mock type for the SpanTrace type
type MockSpanTrace struct {
	mock.Mock
}

type MockSpanTrace_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpanTrace) EXPECT() *MockSpanTrace_Expecter {
	return &MockSpanTrace_Expecter{mock: &_m.Mock}
}

// Finish provides a mock function for the type MockSpanTrace
func (_mock *MockSpanTrace) Finish() {
	_mock.Called()
	return
}

// MockSpanTrace_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type MockSpanTrace_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
func (_e *MockSpanTrace_Expecter) Finish() *MockSpanTrace_Finish_Call {
	return &MockSpanTrace_Finish_Call{Call: _e.mock.On("Finish")}
}

func (_c *MockSpanTrace_Finish_Call) Run(run func()) *MockSpanTrace_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpanTrace_Finish_Call) Return() *MockSpanTrace_Finish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpanTrace_Finish_Call) RunAndReturn(run func()) *MockSpanTrace_Finish_Call {
	_c.Run(run)
	return _c
}
