name: Logger v2 Examples CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'v2/observability/logger/examples/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'v2/observability/logger/examples/**'

env:
  GO_VERSION: '1.21'
  COVERAGE_TARGET: 98

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Run golangci-lint
      working-directory: v2/observability/logger/examples
      run: |
        for example in basic structured context-aware async middleware providers microservices web-app; do
          if [ -d "$example" ]; then
            echo "Linting $example..."
            cd $example
            golangci-lint run .
            cd ..
          fi
        done

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build examples
      working-directory: v2/observability/logger/examples
      run: make build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: v2/observability/logger/examples/build/

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run tests
      working-directory: v2/observability/logger/examples
      run: make test
    
    - name: Generate coverage report
      working-directory: v2/observability/logger/examples
      run: make coverage
    
    - name: Check coverage target
      working-directory: v2/observability/logger/examples
      run: |
        echo "Verificando meta de cobertura de ${{ env.COVERAGE_TARGET }}%..."
        # Script para verificar cobertura será implementado
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: v2/observability/logger/examples/coverage/

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      working-directory: v2/observability/logger/examples
      run: make bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: v2/observability/logger/examples/benchmark/

  examples:
    name: Run Examples
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Execute all examples
      working-directory: v2/observability/logger/examples
      run: |
        chmod +x run_all.sh
        ./run_all.sh
    
    - name: Upload example outputs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: example-outputs
        path: v2/observability/logger/examples/output_*.log

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    
    - name: Run gosec
      working-directory: v2/observability/logger/examples
      run: |
        for example in basic structured context-aware async middleware providers microservices web-app; do
          if [ -d "$example" ]; then
            echo "Security scan $example..."
            cd $example
            gosec .
            cd ..
          fi
        done

  validate:
    name: Complete Validation
    runs-on: ubuntu-latest
    needs: [lint, build, test, benchmark, examples, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run complete validation
      working-directory: v2/observability/logger/examples
      run: make validate
    
    - name: Generate final report
      run: |
        echo "# Logger v2 Examples - Validation Report" > validation_report.md
        echo "Date: $(date)" >> validation_report.md
        echo "Commit: ${{ github.sha }}" >> validation_report.md
        echo "Branch: ${{ github.ref_name }}" >> validation_report.md
        echo "" >> validation_report.md
        echo "## Status" >> validation_report.md
        echo "- ✅ Lint: Passed" >> validation_report.md
        echo "- ✅ Build: Passed" >> validation_report.md  
        echo "- ✅ Tests: Passed" >> validation_report.md
        echo "- ✅ Benchmarks: Passed" >> validation_report.md
        echo "- ✅ Examples: Passed" >> validation_report.md
        echo "- ✅ Security: Passed" >> validation_report.md
    
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation_report.md
