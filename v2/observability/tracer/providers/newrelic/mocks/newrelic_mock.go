// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/newrelic/go-agent/v3/newrelic

package mocks

import (
	"net/http"
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
	"github.com/newrelic/go-agent/v3/newrelic"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// StartTransaction mocks base method.
func (m *MockApplication) StartTransaction(name string, opts ...newrelic.TraceOption) *newrelic.Transaction {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTransaction", varargs...)
	ret0, _ := ret[0].(*newrelic.Transaction)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockApplicationMockRecorder) StartTransaction(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockApplication)(nil).StartTransaction), varargs...)
}

// WrapHTTPHandler mocks base method.
func (m *MockApplication) WrapHTTPHandler(pattern string, handler http.Handler) (string, http.Handler) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapHTTPHandler", pattern, handler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(http.Handler)
	return ret0, ret1
}

// WrapHTTPHandler indicates an expected call of WrapHTTPHandler.
func (mr *MockApplicationMockRecorder) WrapHTTPHandler(pattern, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapHTTPHandler", reflect.TypeOf((*MockApplication)(nil).WrapHTTPHandler), pattern, handler)
}

// RecordCustomEvent mocks base method.
func (m *MockApplication) RecordCustomEvent(eventType string, params map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCustomEvent", eventType, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCustomEvent indicates an expected call of RecordCustomEvent.
func (mr *MockApplicationMockRecorder) RecordCustomEvent(eventType, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCustomEvent", reflect.TypeOf((*MockApplication)(nil).RecordCustomEvent), eventType, params)
}

// RecordCustomMetric mocks base method.
func (m *MockApplication) RecordCustomMetric(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCustomMetric", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCustomMetric indicates an expected call of RecordCustomMetric.
func (mr *MockApplicationMockRecorder) RecordCustomMetric(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCustomMetric", reflect.TypeOf((*MockApplication)(nil).RecordCustomMetric), name, value)
}

// WaitForConnection mocks base method.
func (m *MockApplication) WaitForConnection(timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForConnection", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForConnection indicates an expected call of WaitForConnection.
func (mr *MockApplicationMockRecorder) WaitForConnection(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForConnection", reflect.TypeOf((*MockApplication)(nil).WaitForConnection), timeout)
}

// Shutdown mocks base method.
func (m *MockApplication) Shutdown(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", timeout)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockApplicationMockRecorder) Shutdown(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockApplication)(nil).Shutdown), timeout)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// End mocks base method.
func (m *MockTransaction) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockTransactionMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockTransaction)(nil).End))
}

// SetName mocks base method.
func (m *MockTransaction) SetName(category, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", category, name)
}

// SetName indicates an expected call of SetName.
func (mr *MockTransactionMockRecorder) SetName(category, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockTransaction)(nil).SetName), category, name)
}

// Ignore mocks base method.
func (m *MockTransaction) Ignore() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ignore")
}

// Ignore indicates an expected call of Ignore.
func (mr *MockTransactionMockRecorder) Ignore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockTransaction)(nil).Ignore))
}

// AddAttribute mocks base method.
func (m *MockTransaction) AddAttribute(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttribute", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAttribute indicates an expected call of AddAttribute.
func (mr *MockTransactionMockRecorder) AddAttribute(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttribute", reflect.TypeOf((*MockTransaction)(nil).AddAttribute), key, value)
}

// NoticeError mocks base method.
func (m *MockTransaction) NoticeError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoticeError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// NoticeError indicates an expected call of NoticeError.
func (mr *MockTransactionMockRecorder) NoticeError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoticeError", reflect.TypeOf((*MockTransaction)(nil).NoticeError), err)
}

// StartSegment mocks base method.
func (m *MockTransaction) StartSegment(name string) *newrelic.Segment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSegment", name)
	ret0, _ := ret[0].(*newrelic.Segment)
	return ret0
}

// StartSegment indicates an expected call of StartSegment.
func (mr *MockTransactionMockRecorder) StartSegment(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSegment", reflect.TypeOf((*MockTransaction)(nil).StartSegment), name)
}

// NewGoroutine mocks base method.
func (m *MockTransaction) NewGoroutine() *newrelic.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGoroutine")
	ret0, _ := ret[0].(*newrelic.Transaction)
	return ret0
}

// NewGoroutine indicates an expected call of NewGoroutine.
func (mr *MockTransactionMockRecorder) NewGoroutine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGoroutine", reflect.TypeOf((*MockTransaction)(nil).NewGoroutine))
}

// BrowserTimingHeader mocks base method.
func (m *MockTransaction) BrowserTimingHeader() (*newrelic.BrowserTimingHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BrowserTimingHeader")
	ret0, _ := ret[0].(*newrelic.BrowserTimingHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowserTimingHeader indicates an expected call of BrowserTimingHeader.
func (mr *MockTransactionMockRecorder) BrowserTimingHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowserTimingHeader", reflect.TypeOf((*MockTransaction)(nil).BrowserTimingHeader))
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// End mocks base method.
func (m *MockSegment) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockSegmentMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockSegment)(nil).End))
}

// AddAttribute mocks base method.
func (m *MockSegment) AddAttribute(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttribute", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAttribute indicates an expected call of AddAttribute.
func (mr *MockSegmentMockRecorder) AddAttribute(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttribute", reflect.TypeOf((*MockSegment)(nil).AddAttribute), key, value)
}
